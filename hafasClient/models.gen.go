// Package hafasClient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package hafasClient

import (
	"time"
)

const (
	AccessIdScopes = "accessId.Scopes"
)

// Defines values for ArrivalJourneyStatus.
const (
	ArrivalJourneyStatusA ArrivalJourneyStatus = "A"
	ArrivalJourneyStatusP ArrivalJourneyStatus = "P"
	ArrivalJourneyStatusR ArrivalJourneyStatus = "R"
	ArrivalJourneyStatusS ArrivalJourneyStatus = "S"
)

// Defines values for ArrivalPrognosisType.
const (
	ArrivalPrognosisTypeCALCULATED ArrivalPrognosisType = "CALCULATED"
	ArrivalPrognosisTypeCORRECTED  ArrivalPrognosisType = "CORRECTED"
	ArrivalPrognosisTypeMANUAL     ArrivalPrognosisType = "MANUAL"
	ArrivalPrognosisTypePROGNOSED  ArrivalPrognosisType = "PROGNOSED"
	ArrivalPrognosisTypeREPORTED   ArrivalPrognosisType = "REPORTED"
)

// Defines values for ArrivalRtCnclDataSourceType.
const (
	ArrivalRtCnclDataSourceTypeARAMIS    ArrivalRtCnclDataSourceType = "ARAMIS"
	ArrivalRtCnclDataSourceTypeBLACKLIST ArrivalRtCnclDataSourceType = "BLACKLIST"
	ArrivalRtCnclDataSourceTypeDDS       ArrivalRtCnclDataSourceType = "DDS"
	ArrivalRtCnclDataSourceTypeDEFAULT   ArrivalRtCnclDataSourceType = "DEFAULT"
	ArrivalRtCnclDataSourceTypeFE        ArrivalRtCnclDataSourceType = "FE"
	ArrivalRtCnclDataSourceTypeFIS       ArrivalRtCnclDataSourceType = "FIS"
	ArrivalRtCnclDataSourceTypeGTFS      ArrivalRtCnclDataSourceType = "GTFS"
	ArrivalRtCnclDataSourceTypeHIM       ArrivalRtCnclDataSourceType = "HIM"
	ArrivalRtCnclDataSourceTypeHRC       ArrivalRtCnclDataSourceType = "HRC"
	ArrivalRtCnclDataSourceTypeHRX       ArrivalRtCnclDataSourceType = "HRX"
	ArrivalRtCnclDataSourceTypePAISA     ArrivalRtCnclDataSourceType = "PAISA"
	ArrivalRtCnclDataSourceTypeRTABO2    ArrivalRtCnclDataSourceType = "RTABO_2"
	ArrivalRtCnclDataSourceTypeSIRI      ArrivalRtCnclDataSourceType = "SIRI"
	ArrivalRtCnclDataSourceTypeUIC       ArrivalRtCnclDataSourceType = "UIC"
	ArrivalRtCnclDataSourceTypeVDV       ArrivalRtCnclDataSourceType = "VDV"
)

// Defines values for ConnectionReliabilityTypeAlternative.
const (
	ConnectionReliabilityTypeAlternativeABORTIVE   ConnectionReliabilityTypeAlternative = "ABORTIVE"
	ConnectionReliabilityTypeAlternativeGUARANTEED ConnectionReliabilityTypeAlternative = "GUARANTEED"
	ConnectionReliabilityTypeAlternativeHIGH       ConnectionReliabilityTypeAlternative = "HIGH"
	ConnectionReliabilityTypeAlternativeLOW        ConnectionReliabilityTypeAlternative = "LOW"
	ConnectionReliabilityTypeAlternativeUNDEF      ConnectionReliabilityTypeAlternative = "UNDEF"
)

// Defines values for ConnectionReliabilityTypeOriginal.
const (
	ConnectionReliabilityTypeOriginalABORTIVE   ConnectionReliabilityTypeOriginal = "ABORTIVE"
	ConnectionReliabilityTypeOriginalGUARANTEED ConnectionReliabilityTypeOriginal = "GUARANTEED"
	ConnectionReliabilityTypeOriginalHIGH       ConnectionReliabilityTypeOriginal = "HIGH"
	ConnectionReliabilityTypeOriginalLOW        ConnectionReliabilityTypeOriginal = "LOW"
	ConnectionReliabilityTypeOriginalUNDEF      ConnectionReliabilityTypeOriginal = "UNDEF"
)

// Defines values for DepartureJourneyStatus.
const (
	DepartureJourneyStatusA DepartureJourneyStatus = "A"
	DepartureJourneyStatusP DepartureJourneyStatus = "P"
	DepartureJourneyStatusR DepartureJourneyStatus = "R"
	DepartureJourneyStatusS DepartureJourneyStatus = "S"
)

// Defines values for DeparturePrognosisType.
const (
	DeparturePrognosisTypeCALCULATED DeparturePrognosisType = "CALCULATED"
	DeparturePrognosisTypeCORRECTED  DeparturePrognosisType = "CORRECTED"
	DeparturePrognosisTypeMANUAL     DeparturePrognosisType = "MANUAL"
	DeparturePrognosisTypePROGNOSED  DeparturePrognosisType = "PROGNOSED"
	DeparturePrognosisTypeREPORTED   DeparturePrognosisType = "REPORTED"
)

// Defines values for DepartureRtCnclDataSourceType.
const (
	DepartureRtCnclDataSourceTypeARAMIS    DepartureRtCnclDataSourceType = "ARAMIS"
	DepartureRtCnclDataSourceTypeBLACKLIST DepartureRtCnclDataSourceType = "BLACKLIST"
	DepartureRtCnclDataSourceTypeDDS       DepartureRtCnclDataSourceType = "DDS"
	DepartureRtCnclDataSourceTypeDEFAULT   DepartureRtCnclDataSourceType = "DEFAULT"
	DepartureRtCnclDataSourceTypeFE        DepartureRtCnclDataSourceType = "FE"
	DepartureRtCnclDataSourceTypeFIS       DepartureRtCnclDataSourceType = "FIS"
	DepartureRtCnclDataSourceTypeGTFS      DepartureRtCnclDataSourceType = "GTFS"
	DepartureRtCnclDataSourceTypeHIM       DepartureRtCnclDataSourceType = "HIM"
	DepartureRtCnclDataSourceTypeHRC       DepartureRtCnclDataSourceType = "HRC"
	DepartureRtCnclDataSourceTypeHRX       DepartureRtCnclDataSourceType = "HRX"
	DepartureRtCnclDataSourceTypePAISA     DepartureRtCnclDataSourceType = "PAISA"
	DepartureRtCnclDataSourceTypeRTABO2    DepartureRtCnclDataSourceType = "RTABO_2"
	DepartureRtCnclDataSourceTypeSIRI      DepartureRtCnclDataSourceType = "SIRI"
	DepartureRtCnclDataSourceTypeUIC       DepartureRtCnclDataSourceType = "UIC"
	DepartureRtCnclDataSourceTypeVDV       DepartureRtCnclDataSourceType = "VDV"
)

// Defines values for EcoTypeType.
const (
	BEE EcoTypeType = "BEE"
	IMT EcoTypeType = "IMT"
	PFT EcoTypeType = "PFT"
	PRT EcoTypeType = "PRT"
	PTM EcoTypeType = "PTM"
	PUT EcoTypeType = "PUT"
)

// Defines values for GisRouteSegmentMan.
const (
	GisRouteSegmentManCH  GisRouteSegmentMan = "CH"
	GisRouteSegmentManCIF GisRouteSegmentMan = "CIF"
	GisRouteSegmentManCOF GisRouteSegmentMan = "COF"
	GisRouteSegmentManEF  GisRouteSegmentMan = "EF"
	GisRouteSegmentManEL  GisRouteSegmentMan = "EL"
	GisRouteSegmentManELD GisRouteSegmentMan = "ELD"
	GisRouteSegmentManELU GisRouteSegmentMan = "ELU"
	GisRouteSegmentManEN  GisRouteSegmentMan = "EN"
	GisRouteSegmentManER  GisRouteSegmentMan = "ER"
	GisRouteSegmentManES  GisRouteSegmentMan = "ES"
	GisRouteSegmentManESD GisRouteSegmentMan = "ESD"
	GisRouteSegmentManESU GisRouteSegmentMan = "ESU"
	GisRouteSegmentManFOC GisRouteSegmentMan = "FOC"
	GisRouteSegmentManFOL GisRouteSegmentMan = "FOL"
	GisRouteSegmentManFOR GisRouteSegmentMan = "FOR"
	GisRouteSegmentManFR  GisRouteSegmentMan = "FR"
	GisRouteSegmentManHL  GisRouteSegmentMan = "HL"
	GisRouteSegmentManHR  GisRouteSegmentMan = "HR"
	GisRouteSegmentManKHL GisRouteSegmentMan = "KHL"
	GisRouteSegmentManKHR GisRouteSegmentMan = "KHR"
	GisRouteSegmentManKL  GisRouteSegmentMan = "KL"
	GisRouteSegmentManKR  GisRouteSegmentMan = "KR"
	GisRouteSegmentManKSL GisRouteSegmentMan = "KSL"
	GisRouteSegmentManKSR GisRouteSegmentMan = "KSR"
	GisRouteSegmentManLE  GisRouteSegmentMan = "LE"
	GisRouteSegmentManLF  GisRouteSegmentMan = "LF"
	GisRouteSegmentManLR  GisRouteSegmentMan = "LR"
	GisRouteSegmentManLV  GisRouteSegmentMan = "LV"
	GisRouteSegmentManNO  GisRouteSegmentMan = "NO"
	GisRouteSegmentManON  GisRouteSegmentMan = "ON"
	GisRouteSegmentManRI  GisRouteSegmentMan = "RI"
	GisRouteSegmentManRL  GisRouteSegmentMan = "RL"
	GisRouteSegmentManRP  GisRouteSegmentMan = "RP"
	GisRouteSegmentManRR  GisRouteSegmentMan = "RR"
	GisRouteSegmentManSIR GisRouteSegmentMan = "SIR"
	GisRouteSegmentManSL  GisRouteSegmentMan = "SL"
	GisRouteSegmentManSR  GisRouteSegmentMan = "SR"
	GisRouteSegmentManST  GisRouteSegmentMan = "ST"
	GisRouteSegmentManSTA GisRouteSegmentMan = "STA"
	GisRouteSegmentManSTD GisRouteSegmentMan = "STD"
	GisRouteSegmentManSTU GisRouteSegmentMan = "STU"
	GisRouteSegmentManTLL GisRouteSegmentMan = "TLL"
	GisRouteSegmentManTLR GisRouteSegmentMan = "TLR"
	GisRouteSegmentManTO  GisRouteSegmentMan = "TO"
	GisRouteSegmentManTRL GisRouteSegmentMan = "TRL"
	GisRouteSegmentManTRR GisRouteSegmentMan = "TRR"
	GisRouteSegmentManUT  GisRouteSegmentMan = "UT"
)

// Defines values for GisRouteSegmentOri.
const (
	GisRouteSegmentOriE  GisRouteSegmentOri = "E"
	GisRouteSegmentOriN  GisRouteSegmentOri = "N"
	GisRouteSegmentOriNE GisRouteSegmentOri = "NE"
	GisRouteSegmentOriNW GisRouteSegmentOri = "NW"
	GisRouteSegmentOriS  GisRouteSegmentOri = "S"
	GisRouteSegmentOriSE GisRouteSegmentOri = "SE"
	GisRouteSegmentOriSW GisRouteSegmentOri = "SW"
	GisRouteSegmentOriU  GisRouteSegmentOri = "U"
	GisRouteSegmentOriW  GisRouteSegmentOri = "W"
)

// Defines values for GisRouteSegmentRType.
const (
	GisRouteSegmentRTypeB   GisRouteSegmentRType = "B"
	GisRouteSegmentRTypeC   GisRouteSegmentRType = "C"
	GisRouteSegmentRTypeCT  GisRouteSegmentRType = "CT"
	GisRouteSegmentRTypeCW  GisRouteSegmentRType = "CW"
	GisRouteSegmentRTypeF   GisRouteSegmentRType = "F"
	GisRouteSegmentRTypeH   GisRouteSegmentRType = "H"
	GisRouteSegmentRTypeM   GisRouteSegmentRType = "M"
	GisRouteSegmentRTypeNT  GisRouteSegmentRType = "NT"
	GisRouteSegmentRTypeR   GisRouteSegmentRType = "R"
	GisRouteSegmentRTypeT   GisRouteSegmentRType = "T"
	GisRouteSegmentRTypeT2L GisRouteSegmentRType = "T2L"
	GisRouteSegmentRTypeT4L GisRouteSegmentRType = "T4L"
	GisRouteSegmentRTypeTR  GisRouteSegmentRType = "TR"
	GisRouteSegmentRTypeU   GisRouteSegmentRType = "U"
	GisRouteSegmentRTypeW   GisRouteSegmentRType = "W"
)

// Defines values for IconTypeShape.
const (
	IconTypeShapeB   IconTypeShape = "B"
	IconTypeShapeC   IconTypeShape = "C"
	IconTypeShapeH   IconTypeShape = "H"
	IconTypeShapeR   IconTypeShape = "R"
	IconTypeShapeRES IconTypeShape = "RES"
	IconTypeShapeU   IconTypeShape = "U"
)

// Defines values for IconTypeStyle.
const (
	IconTypeStyleB  IconTypeStyle = "B"
	IconTypeStyleBI IconTypeStyle = "BI"
	IconTypeStyleI  IconTypeStyle = "I"
	IconTypeStyleN  IconTypeStyle = "N"
	IconTypeStyleU  IconTypeStyle = "U"
)

// Defines values for JourneyDetailJourneyStatus.
const (
	JourneyDetailJourneyStatusA JourneyDetailJourneyStatus = "A"
	JourneyDetailJourneyStatusP JourneyDetailJourneyStatus = "P"
	JourneyDetailJourneyStatusR JourneyDetailJourneyStatus = "R"
	JourneyDetailJourneyStatusS JourneyDetailJourneyStatus = "S"
)

// Defines values for JourneyDetailParallelJourneyLinkType.
const (
	JourneyDetailParallelJourneyLinkTypeLINKEDRT   JourneyDetailParallelJourneyLinkType = "LINKED_RT"
	JourneyDetailParallelJourneyLinkTypePLANNED    JourneyDetailParallelJourneyLinkType = "PLANNED"
	JourneyDetailParallelJourneyLinkTypeUNDEF      JourneyDetailParallelJourneyLinkType = "UNDEF"
	JourneyDetailParallelJourneyLinkTypeUNLINKEDRT JourneyDetailParallelJourneyLinkType = "UNLINKED_RT"
)

// Defines values for JourneyPathItemTypeState.
const (
	JourneyPathItemTypeStateA JourneyPathItemTypeState = "A"
	JourneyPathItemTypeStateB JourneyPathItemTypeState = "B"
	JourneyPathItemTypeStateO JourneyPathItemTypeState = "O"
	JourneyPathItemTypeStateU JourneyPathItemTypeState = "U"
)

// Defines values for JourneyTypeParallelJourneyLinkType.
const (
	JourneyTypeParallelJourneyLinkTypeLINKEDRT   JourneyTypeParallelJourneyLinkType = "LINKED_RT"
	JourneyTypeParallelJourneyLinkTypePLANNED    JourneyTypeParallelJourneyLinkType = "PLANNED"
	JourneyTypeParallelJourneyLinkTypeUNDEF      JourneyTypeParallelJourneyLinkType = "UNDEF"
	JourneyTypeParallelJourneyLinkTypeUNLINKEDRT JourneyTypeParallelJourneyLinkType = "UNLINKED_RT"
)

// Defines values for LegJourneyStatus.
const (
	LegJourneyStatusA LegJourneyStatus = "A"
	LegJourneyStatusP LegJourneyStatus = "P"
	LegJourneyStatusR LegJourneyStatus = "R"
	LegJourneyStatusS LegJourneyStatus = "S"
)

// Defines values for LegRecState.
const (
	LegRecStateC LegRecState = "C"
	LegRecStateN LegRecState = "N"
	LegRecStateO LegRecState = "O"
	LegRecStateP LegRecState = "P"
	LegRecStateU LegRecState = "U"
)

// Defines values for LegWaitingState.
const (
	LegWaitingStateNOWAIT LegWaitingState = "NOWAIT"
	LegWaitingStateUNDEF  LegWaitingState = "UNDEF"
	LegWaitingStateWAIT   LegWaitingState = "WAIT"
)

// Defines values for LocationNoteType.
const (
	LocationNoteTypeA   LocationNoteType = "A"
	LocationNoteTypeB   LocationNoteType = "B"
	LocationNoteTypeC   LocationNoteType = "C"
	LocationNoteTypeD   LocationNoteType = "D"
	LocationNoteTypeED  LocationNoteType = "ED"
	LocationNoteTypeFN  LocationNoteType = "FN"
	LocationNoteTypeG   LocationNoteType = "G"
	LocationNoteTypeH   LocationNoteType = "H"
	LocationNoteTypeI   LocationNoteType = "I"
	LocationNoteTypeK   LocationNoteType = "K"
	LocationNoteTypeL   LocationNoteType = "L"
	LocationNoteTypeLNC LocationNoteType = "LNC"
	LocationNoteTypeM   LocationNoteType = "M"
	LocationNoteTypeN   LocationNoteType = "N"
	LocationNoteTypeO   LocationNoteType = "O"
	LocationNoteTypeP   LocationNoteType = "P"
	LocationNoteTypeQ   LocationNoteType = "Q"
	LocationNoteTypeR   LocationNoteType = "R"
	LocationNoteTypeS   LocationNoteType = "S"
	LocationNoteTypeTAR LocationNoteType = "TAR"
	LocationNoteTypeTLN LocationNoteType = "TLN"
	LocationNoteTypeU   LocationNoteType = "U"
	LocationNoteTypeV   LocationNoteType = "V"
	LocationNoteTypeW   LocationNoteType = "W"
	LocationNoteTypeX   LocationNoteType = "X"
	LocationNoteTypeY   LocationNoteType = "Y"
	LocationNoteTypeZ   LocationNoteType = "Z"
)

// Defines values for MessageBaseType.
const (
	MessageBaseTypeGLOBAL         MessageBaseType = "GLOBAL"
	MessageBaseTypeINFRASTRUCTURE MessageBaseType = "INFRASTRUCTURE"
	MessageBaseTypeUNDEF          MessageBaseType = "UNDEF"
)

// Defines values for NoteType.
const (
	NoteTypeA   NoteType = "A"
	NoteTypeB   NoteType = "B"
	NoteTypeC   NoteType = "C"
	NoteTypeD   NoteType = "D"
	NoteTypeED  NoteType = "ED"
	NoteTypeFN  NoteType = "FN"
	NoteTypeG   NoteType = "G"
	NoteTypeH   NoteType = "H"
	NoteTypeI   NoteType = "I"
	NoteTypeK   NoteType = "K"
	NoteTypeL   NoteType = "L"
	NoteTypeLNC NoteType = "LNC"
	NoteTypeM   NoteType = "M"
	NoteTypeN   NoteType = "N"
	NoteTypeO   NoteType = "O"
	NoteTypeP   NoteType = "P"
	NoteTypeQ   NoteType = "Q"
	NoteTypeR   NoteType = "R"
	NoteTypeS   NoteType = "S"
	NoteTypeTAR NoteType = "TAR"
	NoteTypeTLN NoteType = "TLN"
	NoteTypeU   NoteType = "U"
	NoteTypeV   NoteType = "V"
	NoteTypeW   NoteType = "W"
	NoteTypeX   NoteType = "X"
	NoteTypeY   NoteType = "Y"
	NoteTypeZ   NoteType = "Z"
)

// Defines values for OriginDestTypePrognosisType.
const (
	OriginDestTypePrognosisTypeCALCULATED OriginDestTypePrognosisType = "CALCULATED"
	OriginDestTypePrognosisTypeCORRECTED  OriginDestTypePrognosisType = "CORRECTED"
	OriginDestTypePrognosisTypeMANUAL     OriginDestTypePrognosisType = "MANUAL"
	OriginDestTypePrognosisTypePROGNOSED  OriginDestTypePrognosisType = "PROGNOSED"
	OriginDestTypePrognosisTypeREPORTED   OriginDestTypePrognosisType = "REPORTED"
)

// Defines values for OriginDestTypeRtCnclDataSourceType.
const (
	OriginDestTypeRtCnclDataSourceTypeARAMIS    OriginDestTypeRtCnclDataSourceType = "ARAMIS"
	OriginDestTypeRtCnclDataSourceTypeBLACKLIST OriginDestTypeRtCnclDataSourceType = "BLACKLIST"
	OriginDestTypeRtCnclDataSourceTypeDDS       OriginDestTypeRtCnclDataSourceType = "DDS"
	OriginDestTypeRtCnclDataSourceTypeDEFAULT   OriginDestTypeRtCnclDataSourceType = "DEFAULT"
	OriginDestTypeRtCnclDataSourceTypeFE        OriginDestTypeRtCnclDataSourceType = "FE"
	OriginDestTypeRtCnclDataSourceTypeFIS       OriginDestTypeRtCnclDataSourceType = "FIS"
	OriginDestTypeRtCnclDataSourceTypeGTFS      OriginDestTypeRtCnclDataSourceType = "GTFS"
	OriginDestTypeRtCnclDataSourceTypeHIM       OriginDestTypeRtCnclDataSourceType = "HIM"
	OriginDestTypeRtCnclDataSourceTypeHRC       OriginDestTypeRtCnclDataSourceType = "HRC"
	OriginDestTypeRtCnclDataSourceTypeHRX       OriginDestTypeRtCnclDataSourceType = "HRX"
	OriginDestTypeRtCnclDataSourceTypePAISA     OriginDestTypeRtCnclDataSourceType = "PAISA"
	OriginDestTypeRtCnclDataSourceTypeRTABO2    OriginDestTypeRtCnclDataSourceType = "RTABO_2"
	OriginDestTypeRtCnclDataSourceTypeSIRI      OriginDestTypeRtCnclDataSourceType = "SIRI"
	OriginDestTypeRtCnclDataSourceTypeUIC       OriginDestTypeRtCnclDataSourceType = "UIC"
	OriginDestTypeRtCnclDataSourceTypeVDV       OriginDestTypeRtCnclDataSourceType = "VDV"
)

// Defines values for ParallelJourneyRefTypeLinkType.
const (
	ParallelJourneyRefTypeLinkTypeLINKEDRT   ParallelJourneyRefTypeLinkType = "LINKED_RT"
	ParallelJourneyRefTypeLinkTypePLANNED    ParallelJourneyRefTypeLinkType = "PLANNED"
	ParallelJourneyRefTypeLinkTypeUNDEF      ParallelJourneyRefTypeLinkType = "UNDEF"
	ParallelJourneyRefTypeLinkTypeUNLINKEDRT ParallelJourneyRefTypeLinkType = "UNLINKED_RT"
)

// Defines values for ParallelJourneyRefTypeType.
const (
	ParallelJourneyRefTypeTypeTHROUGHCOACH ParallelJourneyRefTypeType = "THROUGHCOACH"
	ParallelJourneyRefTypeTypeTIETHROUGH   ParallelJourneyRefTypeType = "TIETHROUGH"
	ParallelJourneyRefTypeTypeUNDEF        ParallelJourneyRefTypeType = "UNDEF"
	ParallelJourneyRefTypeTypeUNION        ParallelJourneyRefTypeType = "UNION"
)

// Defines values for PlatformTypeType.
const (
	PlatformTypeTypeCI PlatformTypeType = "CI"
	PlatformTypeTypeCO PlatformTypeType = "CO"
	PlatformTypeTypeFL PlatformTypeType = "FL"
	PlatformTypeTypeGA PlatformTypeType = "GA"
	PlatformTypeTypeH  PlatformTypeType = "H"
	PlatformTypeTypePI PlatformTypeType = "PI"
	PlatformTypeTypePL PlatformTypeType = "PL"
	PlatformTypeTypeSL PlatformTypeType = "SL"
	PlatformTypeTypeST PlatformTypeType = "ST"
	PlatformTypeTypeU  PlatformTypeType = "U"
	PlatformTypeTypeX  PlatformTypeType = "X"
)

// Defines values for PolylineType.
const (
	PolylineTypeHAFASGEO PolylineType = "HAFASGEO"
	PolylineTypePLANAR   PolylineType = "PLANAR"
	PolylineTypeWGS84    PolylineType = "WGS84"
)

// Defines values for PolylineGroupCoordType.
const (
	PolylineGroupCoordTypeHAFASGEO PolylineGroupCoordType = "HAFASGEO"
	PolylineGroupCoordTypePLANAR   PolylineGroupCoordType = "PLANAR"
	PolylineGroupCoordTypeWGS84    PolylineGroupCoordType = "WGS84"
)

// Defines values for ReferencedJourneyTypeType.
const (
	ReferencedJourneyTypeTypeDEFAULT                              ReferencedJourneyTypeType = "DEFAULT"
	ReferencedJourneyTypeTypeDEFAULTR                             ReferencedJourneyTypeType = "DEFAULT_R"
	ReferencedJourneyTypeTypeHATENTLASTUNG                        ReferencedJourneyTypeType = "HAT_ENTLASTUNG"
	ReferencedJourneyTypeTypeHATERSATZFAHRT                       ReferencedJourneyTypeType = "HAT_ERSATZFAHRT"
	ReferencedJourneyTypeTypeHATFORTFUEHRUNG                      ReferencedJourneyTypeType = "HAT_FORTFUEHRUNG"
	ReferencedJourneyTypeTypeHATFORTFUEHRUNGDURCHZUSAMMENFUEHRUNG ReferencedJourneyTypeType = "HAT_FORTFUEHRUNG_DURCH_ZUSAMMENFUEHRUNG"
	ReferencedJourneyTypeTypeHATFORTFUEHRUNGVONTRENNUNG           ReferencedJourneyTypeType = "HAT_FORTFUEHRUNG_VON_TRENNUNG"
	ReferencedJourneyTypeTypeHATTRENNUNG                          ReferencedJourneyTypeType = "HAT_TRENNUNG"
	ReferencedJourneyTypeTypeHATVERSTAERKERFAHRT                  ReferencedJourneyTypeType = "HAT_VERSTAERKERFAHRT"
	ReferencedJourneyTypeTypeHATZUSAMMENFUEHRUNG                  ReferencedJourneyTypeType = "HAT_ZUSAMMENFUEHRUNG"
	ReferencedJourneyTypeTypeISTENTLASTUNG                        ReferencedJourneyTypeType = "IST_ENTLASTUNG"
	ReferencedJourneyTypeTypeISTERSATZFAHRT                       ReferencedJourneyTypeType = "IST_ERSATZFAHRT"
	ReferencedJourneyTypeTypeISTFORTFUEHRUNG                      ReferencedJourneyTypeType = "IST_FORTFUEHRUNG"
	ReferencedJourneyTypeTypeISTFORTFUEHRUNGDURCHZUSAMMENFUEHRUNG ReferencedJourneyTypeType = "IST_FORTFUEHRUNG_DURCH_ZUSAMMENFUEHRUNG"
	ReferencedJourneyTypeTypeISTFORTFUEHRUNGVONTRENNUNG           ReferencedJourneyTypeType = "IST_FORTFUEHRUNG_VON_TRENNUNG"
	ReferencedJourneyTypeTypeISTTRENNUNG                          ReferencedJourneyTypeType = "IST_TRENNUNG"
	ReferencedJourneyTypeTypeISTVERSTAERKERFAHRT                  ReferencedJourneyTypeType = "IST_VERSTAERKERFAHRT"
	ReferencedJourneyTypeTypeISTZUSAMMENFUEHRUNG                  ReferencedJourneyTypeType = "IST_ZUSAMMENFUEHRUNG"
	ReferencedJourneyTypeTypeUNDEF                                ReferencedJourneyTypeType = "UNDEF"
)

// Defines values for SortingGroupTypeType.
const (
	SortingGroupTypeTypeAT  SortingGroupTypeType = "AT"
	SortingGroupTypeTypeCAL SortingGroupTypeType = "CAL"
	SortingGroupTypeTypeCF  SortingGroupTypeType = "CF"
	SortingGroupTypeTypeCO  SortingGroupTypeType = "CO"
	SortingGroupTypeTypeCO2 SortingGroupTypeType = "CO2"
	SortingGroupTypeTypeDT  SortingGroupTypeType = "DT"
	SortingGroupTypeTypeOC  SortingGroupTypeType = "OC"
	SortingGroupTypeTypePT  SortingGroupTypeType = "PT"
	SortingGroupTypeTypeTI  SortingGroupTypeType = "TI"
	SortingGroupTypeTypeUT  SortingGroupTypeType = "UT"
)

// Defines values for SortingTypeInitialSortingType.
const (
	SortingTypeInitialSortingTypeAT  SortingTypeInitialSortingType = "AT"
	SortingTypeInitialSortingTypeCAL SortingTypeInitialSortingType = "CAL"
	SortingTypeInitialSortingTypeCF  SortingTypeInitialSortingType = "CF"
	SortingTypeInitialSortingTypeCO  SortingTypeInitialSortingType = "CO"
	SortingTypeInitialSortingTypeCO2 SortingTypeInitialSortingType = "CO2"
	SortingTypeInitialSortingTypeDT  SortingTypeInitialSortingType = "DT"
	SortingTypeInitialSortingTypeOC  SortingTypeInitialSortingType = "OC"
	SortingTypeInitialSortingTypePT  SortingTypeInitialSortingType = "PT"
	SortingTypeInitialSortingTypeTI  SortingTypeInitialSortingType = "TI"
	SortingTypeInitialSortingTypeUT  SortingTypeInitialSortingType = "UT"
)

// Defines values for SotContextTypeLocMode.
const (
	ATCHANGESTOP                    SotContextTypeLocMode = "AT_CHANGE_STOP"
	ATDESTINATION                   SotContextTypeLocMode = "AT_DESTINATION"
	ATLASTUSABLESTOP                SotContextTypeLocMode = "AT_LAST_USABLE_STOP"
	ATPASSEDSTOP                    SotContextTypeLocMode = "AT_PASSED_STOP"
	BEFORETRAVEL                    SotContextTypeLocMode = "BEFORE_TRAVEL"
	CHECKCOMPLETETRAIN              SotContextTypeLocMode = "CHECK_COMPLETE_TRAIN"
	ERROR                           SotContextTypeLocMode = "ERROR"
	ERRORALLTRAINSFILTERED          SotContextTypeLocMode = "ERROR_ALL_TRAINS_FILTERED"
	ERRORINRECONSTRUCTION           SotContextTypeLocMode = "ERROR_IN_RECONSTRUCTION"
	ERRORSEARCHFROMTRAINBEFORESTART SotContextTypeLocMode = "ERROR_SEARCH_FROM_TRAIN_BEFORE_START"
	ERRORSTAYINCURRENTCONNECTION    SotContextTypeLocMode = "ERROR_STAY_IN_CURRENT_CONNECTION"
	ERRORTRAINCANCELLED             SotContextTypeLocMode = "ERROR_TRAIN_CANCELLED"
	FROMSTART                       SotContextTypeLocMode = "FROM_START"
	INTRAIN                         SotContextTypeLocMode = "IN_TRAIN"
	TOBEDEFINEDINSERVER             SotContextTypeLocMode = "TO_BE_DEFINED_IN_SERVER"
	UNKNOWN                         SotContextTypeLocMode = "UNKNOWN"
)

// Defines values for StopTypeArrPrognosisType.
const (
	StopTypeArrPrognosisTypeCALCULATED StopTypeArrPrognosisType = "CALCULATED"
	StopTypeArrPrognosisTypeCORRECTED  StopTypeArrPrognosisType = "CORRECTED"
	StopTypeArrPrognosisTypeMANUAL     StopTypeArrPrognosisType = "MANUAL"
	StopTypeArrPrognosisTypePROGNOSED  StopTypeArrPrognosisType = "PROGNOSED"
	StopTypeArrPrognosisTypeREPORTED   StopTypeArrPrognosisType = "REPORTED"
)

// Defines values for StopTypeDepPrognosisType.
const (
	CALCULATED StopTypeDepPrognosisType = "CALCULATED"
	CORRECTED  StopTypeDepPrognosisType = "CORRECTED"
	MANUAL     StopTypeDepPrognosisType = "MANUAL"
	PROGNOSED  StopTypeDepPrognosisType = "PROGNOSED"
	REPORTED   StopTypeDepPrognosisType = "REPORTED"
)

// Defines values for StopTypeRtCnclDataSourceType.
const (
	ARAMIS    StopTypeRtCnclDataSourceType = "ARAMIS"
	BLACKLIST StopTypeRtCnclDataSourceType = "BLACKLIST"
	DDS       StopTypeRtCnclDataSourceType = "DDS"
	DEFAULT   StopTypeRtCnclDataSourceType = "DEFAULT"
	FE        StopTypeRtCnclDataSourceType = "FE"
	FIS       StopTypeRtCnclDataSourceType = "FIS"
	GTFS      StopTypeRtCnclDataSourceType = "GTFS"
	HIM       StopTypeRtCnclDataSourceType = "HIM"
	HRC       StopTypeRtCnclDataSourceType = "HRC"
	HRX       StopTypeRtCnclDataSourceType = "HRX"
	PAISA     StopTypeRtCnclDataSourceType = "PAISA"
	RTABO2    StopTypeRtCnclDataSourceType = "RTABO_2"
	SIRI      StopTypeRtCnclDataSourceType = "SIRI"
	UIC       StopTypeRtCnclDataSourceType = "UIC"
	VDV       StopTypeRtCnclDataSourceType = "VDV"
)

// Defines values for TrafficMessageTypeType.
const (
	AC                    TrafficMessageTypeType = "AC"
	ACCESSRESTRICTION     TrafficMessageTypeType = "ACCESS_RESTRICTION"
	ACCIDENT              TrafficMessageTypeType = "ACCIDENT"
	AT                    TrafficMessageTypeType = "AT"
	BURNINGVEHICLE        TrafficMessageTypeType = "BURNING_VEHICLE"
	CO                    TrafficMessageTypeType = "CO"
	CONSTRUCTIONSITE      TrafficMessageTypeType = "CONSTRUCTION_SITE"
	DANGER                TrafficMessageTypeType = "DANGER"
	DELAY                 TrafficMessageTypeType = "DELAY"
	GENERIC               TrafficMessageTypeType = "GENERIC"
	JUNCTIONCLOSED        TrafficMessageTypeType = "JUNCTION_CLOSED"
	LANECLOSED            TrafficMessageTypeType = "LANE_CLOSED"
	OBSTRUCTION           TrafficMessageTypeType = "OBSTRUCTION"
	RAILROADCROSSING      TrafficMessageTypeType = "RAIL_ROAD_CROSSING"
	RCLM                  TrafficMessageTypeType = "RCLM"
	REROUTING             TrafficMessageTypeType = "REROUTING"
	ROADCLOSED            TrafficMessageTypeType = "ROAD_CLOSED"
	RW                    TrafficMessageTypeType = "RW"
	TRAFFICJAM            TrafficMessageTypeType = "TRAFFIC_JAM"
	TRAFFICLIGHTSDEFECT   TrafficMessageTypeType = "TRAFFIC_LIGHTS_DEFECT"
	U                     TrafficMessageTypeType = "U"
	WEATHER               TrafficMessageTypeType = "WEATHER"
	WEATHERHAIL           TrafficMessageTypeType = "WEATHER_HAIL"
	WEATHERICE            TrafficMessageTypeType = "WEATHER_ICE"
	WEATHERPOORVISIBILITY TrafficMessageTypeType = "WEATHER_POOR_VISIBILITY"
	WEATHERSNOW           TrafficMessageTypeType = "WEATHER_SNOW"
	WEATHERWIND           TrafficMessageTypeType = "WEATHER_WIND"
)

// Defines values for TripTypeCalculation.
const (
	INITIAL                    TripTypeCalculation = "INITIAL"
	RETRYDOUBLERADIUS          TripTypeCalculation = "RETRY_DOUBLE_RADIUS"
	RETRYPRESELECTIONNEWRADIUS TripTypeCalculation = "RETRY_PRESELECTION_NEW_RADIUS"
	RETRYSHARP                 TripTypeCalculation = "RETRY_SHARP"
	RETRYUNSHARP               TripTypeCalculation = "RETRY_UNSHARP"
	RETRYUNSHARPNEWRADIUS      TripTypeCalculation = "RETRY_UNSHARP_NEW_RADIUS"
)

// Defines values for WeatherInformationTypeType.
const (
	CLEAR            WeatherInformationTypeType = "CLEAR"
	CLOUDY           WeatherInformationTypeType = "CLOUDY"
	DRIZZLE          WeatherInformationTypeType = "DRIZZLE"
	DRY              WeatherInformationTypeType = "DRY"
	FOG              WeatherInformationTypeType = "FOG"
	HAIL             WeatherInformationTypeType = "HAIL"
	HEAVYFOG         WeatherInformationTypeType = "HEAVY_FOG"
	HEAVYHAIL        WeatherInformationTypeType = "HEAVY_HAIL"
	HEAVYRAIN        WeatherInformationTypeType = "HEAVY_RAIN"
	HEAVYSANDSTORM   WeatherInformationTypeType = "HEAVY_SANDSTORM"
	HEAVYSNOW        WeatherInformationTypeType = "HEAVY_SNOW"
	LIGHTRAIN        WeatherInformationTypeType = "LIGHT_RAIN"
	PARTIALLYCLOUDY  WeatherInformationTypeType = "PARTIALLY_CLOUDY"
	RAIN             WeatherInformationTypeType = "RAIN"
	RAINSHOWER       WeatherInformationTypeType = "RAIN_SHOWER"
	SANDSTORM        WeatherInformationTypeType = "SANDSTORM"
	SLEET            WeatherInformationTypeType = "SLEET"
	SLEETSHOWER      WeatherInformationTypeType = "SLEET_SHOWER"
	SLIGHTLYCLOUDY   WeatherInformationTypeType = "SLIGHTLY_CLOUDY"
	SLIPPERYROAD     WeatherInformationTypeType = "SLIPPERY_ROAD"
	SNOW             WeatherInformationTypeType = "SNOW"
	SNOWSHOWER       WeatherInformationTypeType = "SNOW_SHOWER"
	STORM            WeatherInformationTypeType = "STORM"
	THUNDERSANDSTORM WeatherInformationTypeType = "THUNDER_SANDSTORM"
	THUNDERSTORM     WeatherInformationTypeType = "THUNDERSTORM"
	UNDEF            WeatherInformationTypeType = "UNDEF"
	WETANDCOLD       WeatherInformationTypeType = "WET_AND_COLD"
)

// Defines values for GetArrivalBoardParamsFormat.
const (
	GetArrivalBoardParamsFormatJson  GetArrivalBoardParamsFormat = "json"
	GetArrivalBoardParamsFormatJsonp GetArrivalBoardParamsFormat = "jsonp"
	GetArrivalBoardParamsFormatXml   GetArrivalBoardParamsFormat = "xml"
)

// Defines values for GetArrivalBoardParamsPasslist.
const (
	GetArrivalBoardParamsPasslistN0 GetArrivalBoardParamsPasslist = "0"
	GetArrivalBoardParamsPasslistN1 GetArrivalBoardParamsPasslist = "1"
)

// Defines values for GetArrivalBoardParamsBaim.
const (
	GetArrivalBoardParamsBaimN0 GetArrivalBoardParamsBaim = "0"
	GetArrivalBoardParamsBaimN1 GetArrivalBoardParamsBaim = "1"
)

// Defines values for GetArrivalBoardParamsRtMode.
const (
	GetArrivalBoardParamsRtModeOFF           GetArrivalBoardParamsRtMode = "OFF"
	GetArrivalBoardParamsRtModeSERVERDEFAULT GetArrivalBoardParamsRtMode = "SERVER_DEFAULT"
)

// Defines values for GetArrivalBoardParamsType.
const (
	ARR        GetArrivalBoardParamsType = "ARR"
	ARREQUIVS  GetArrivalBoardParamsType = "ARR_EQUIVS"
	ARRMAST    GetArrivalBoardParamsType = "ARR_MAST"
	ARRSTATION GetArrivalBoardParamsType = "ARR_STATION"
)

// Defines values for GetDepartureBoardParamsFormat.
const (
	GetDepartureBoardParamsFormatJson  GetDepartureBoardParamsFormat = "json"
	GetDepartureBoardParamsFormatJsonp GetDepartureBoardParamsFormat = "jsonp"
	GetDepartureBoardParamsFormatXml   GetDepartureBoardParamsFormat = "xml"
)

// Defines values for GetDepartureBoardParamsPasslist.
const (
	GetDepartureBoardParamsPasslistN0 GetDepartureBoardParamsPasslist = "0"
	GetDepartureBoardParamsPasslistN1 GetDepartureBoardParamsPasslist = "1"
)

// Defines values for GetDepartureBoardParamsBaim.
const (
	GetDepartureBoardParamsBaimN0 GetDepartureBoardParamsBaim = "0"
	GetDepartureBoardParamsBaimN1 GetDepartureBoardParamsBaim = "1"
)

// Defines values for GetDepartureBoardParamsRtMode.
const (
	GetDepartureBoardParamsRtModeOFF           GetDepartureBoardParamsRtMode = "OFF"
	GetDepartureBoardParamsRtModeSERVERDEFAULT GetDepartureBoardParamsRtMode = "SERVER_DEFAULT"
)

// Defines values for GetDepartureBoardParamsType.
const (
	DEP        GetDepartureBoardParamsType = "DEP"
	DEPEQUIVS  GetDepartureBoardParamsType = "DEP_EQUIVS"
	DEPMAST    GetDepartureBoardParamsType = "DEP_MAST"
	DEPSTATION GetDepartureBoardParamsType = "DEP_STATION"
)

// Defines values for GetGisrouteParamsFormat.
const (
	GetGisrouteParamsFormatJson  GetGisrouteParamsFormat = "json"
	GetGisrouteParamsFormatJsonp GetGisrouteParamsFormat = "jsonp"
	GetGisrouteParamsFormatXml   GetGisrouteParamsFormat = "xml"
)

// Defines values for GetGisrouteParamsPoly.
const (
	GetGisrouteParamsPolyN0 GetGisrouteParamsPoly = "0"
	GetGisrouteParamsPolyN1 GetGisrouteParamsPoly = "1"
)

// Defines values for GetGisrouteParamsPolyEnc.
const (
	GetGisrouteParamsPolyEncDLT GetGisrouteParamsPolyEnc = "DLT"
	GetGisrouteParamsPolyEncGPA GetGisrouteParamsPolyEnc = "GPA"
	GetGisrouteParamsPolyEncN   GetGisrouteParamsPolyEnc = "N"
)

// Defines values for GetGisrouteParamsEco.
const (
	GetGisrouteParamsEcoN0 GetGisrouteParamsEco = "0"
	GetGisrouteParamsEcoN1 GetGisrouteParamsEco = "1"
)

// Defines values for GetGisrouteParamsBaim.
const (
	GetGisrouteParamsBaimN0 GetGisrouteParamsBaim = "0"
	GetGisrouteParamsBaimN1 GetGisrouteParamsBaim = "1"
)

// Defines values for GetHimsearchParamsFormat.
const (
	GetHimsearchParamsFormatJson  GetHimsearchParamsFormat = "json"
	GetHimsearchParamsFormatJsonp GetHimsearchParamsFormat = "jsonp"
	GetHimsearchParamsFormatXml   GetHimsearchParamsFormat = "xml"
)

// Defines values for GetHimsearchParamsHierarchicalView.
const (
	GetHimsearchParamsHierarchicalViewN0 GetHimsearchParamsHierarchicalView = "0"
	GetHimsearchParamsHierarchicalViewN1 GetHimsearchParamsHierarchicalView = "1"
)

// Defines values for GetHimsearchParamsBothways.
const (
	GetHimsearchParamsBothwaysN0 GetHimsearchParamsBothways = "0"
	GetHimsearchParamsBothwaysN1 GetHimsearchParamsBothways = "1"
)

// Defines values for GetHimsearchParamsPoly.
const (
	GetHimsearchParamsPolyN0 GetHimsearchParamsPoly = "0"
	GetHimsearchParamsPolyN1 GetHimsearchParamsPoly = "1"
)

// Defines values for GetHimsearchParamsSearchmode.
const (
	MATCH   GetHimsearchParamsSearchmode = "MATCH"
	NOMATCH GetHimsearchParamsSearchmode = "NOMATCH"
	TFMATCH GetHimsearchParamsSearchmode = "TFMATCH"
)

// Defines values for GetHimsearchParamsAffectedJourneyMode.
const (
	GetHimsearchParamsAffectedJourneyModeALL GetHimsearchParamsAffectedJourneyMode = "ALL"
	GetHimsearchParamsAffectedJourneyModeOFF GetHimsearchParamsAffectedJourneyMode = "OFF"
)

// Defines values for GetHimsearchParamsAffectedJourneyStopMode.
const (
	GetHimsearchParamsAffectedJourneyStopModeALL GetHimsearchParamsAffectedJourneyStopMode = "ALL"
	GetHimsearchParamsAffectedJourneyStopModeIMP GetHimsearchParamsAffectedJourneyStopMode = "IMP"
	GetHimsearchParamsAffectedJourneyStopModeOFF GetHimsearchParamsAffectedJourneyStopMode = "OFF"
)

// Defines values for GetJourneyDetailParamsFormat.
const (
	GetJourneyDetailParamsFormatJson  GetJourneyDetailParamsFormat = "json"
	GetJourneyDetailParamsFormatJsonp GetJourneyDetailParamsFormat = "jsonp"
	GetJourneyDetailParamsFormatXml   GetJourneyDetailParamsFormat = "xml"
)

// Defines values for GetJourneyDetailParamsPoly.
const (
	GetJourneyDetailParamsPolyN0 GetJourneyDetailParamsPoly = "0"
	GetJourneyDetailParamsPolyN1 GetJourneyDetailParamsPoly = "1"
)

// Defines values for GetJourneyDetailParamsPolyEnc.
const (
	GetJourneyDetailParamsPolyEncDLT GetJourneyDetailParamsPolyEnc = "DLT"
	GetJourneyDetailParamsPolyEncGPA GetJourneyDetailParamsPolyEnc = "GPA"
	GetJourneyDetailParamsPolyEncN   GetJourneyDetailParamsPolyEnc = "N"
)

// Defines values for GetJourneyDetailParamsShowPassingPoints.
const (
	GetJourneyDetailParamsShowPassingPointsN0 GetJourneyDetailParamsShowPassingPoints = "0"
	GetJourneyDetailParamsShowPassingPointsN1 GetJourneyDetailParamsShowPassingPoints = "1"
)

// Defines values for GetJourneyDetailParamsRtMode.
const (
	GetJourneyDetailParamsRtModeFULL          GetJourneyDetailParamsRtMode = "FULL"
	GetJourneyDetailParamsRtModeINFOS         GetJourneyDetailParamsRtMode = "INFOS"
	GetJourneyDetailParamsRtModeOFF           GetJourneyDetailParamsRtMode = "OFF"
	GetJourneyDetailParamsRtModeREALTIME      GetJourneyDetailParamsRtMode = "REALTIME"
	GetJourneyDetailParamsRtModeSERVERDEFAULT GetJourneyDetailParamsRtMode = "SERVER_DEFAULT"
)

// Defines values for GetJourneyDetailParamsBaim.
const (
	GetJourneyDetailParamsBaimN0 GetJourneyDetailParamsBaim = "0"
	GetJourneyDetailParamsBaimN1 GetJourneyDetailParamsBaim = "1"
)

// Defines values for GetJourneyposParamsFormat.
const (
	GetJourneyposParamsFormatJson  GetJourneyposParamsFormat = "json"
	GetJourneyposParamsFormatJsonp GetJourneyposParamsFormat = "jsonp"
	GetJourneyposParamsFormatXml   GetJourneyposParamsFormat = "xml"
)

// Defines values for GetJourneyposParamsPositionMode.
const (
	CALC       GetJourneyposParamsPositionMode = "CALC"
	CALCREPORT GetJourneyposParamsPositionMode = "CALC_REPORT"
	REPORTONLY GetJourneyposParamsPositionMode = "REPORT_ONLY"
)

// Defines values for GetLocationNameParamsFormat.
const (
	GetLocationNameParamsFormatJson  GetLocationNameParamsFormat = "json"
	GetLocationNameParamsFormatJsonp GetLocationNameParamsFormat = "jsonp"
	GetLocationNameParamsFormatXml   GetLocationNameParamsFormat = "xml"
)

// Defines values for GetLocationNameParamsType.
const (
	GetLocationNameParamsTypeA   GetLocationNameParamsType = "A"
	GetLocationNameParamsTypeALL GetLocationNameParamsType = "ALL"
	GetLocationNameParamsTypeAP  GetLocationNameParamsType = "AP"
	GetLocationNameParamsTypeP   GetLocationNameParamsType = "P"
	GetLocationNameParamsTypeS   GetLocationNameParamsType = "S"
	GetLocationNameParamsTypeSA  GetLocationNameParamsType = "SA"
	GetLocationNameParamsTypeSP  GetLocationNameParamsType = "SP"
)

// Defines values for GetLocationNameParamsLocationSelectionMode.
const (
	GetLocationNameParamsLocationSelectionModeSLCTA GetLocationNameParamsLocationSelectionMode = "SLCT_A"
	GetLocationNameParamsLocationSelectionModeSLCTN GetLocationNameParamsLocationSelectionMode = "SLCT_N"
)

// Defines values for GetLocationNameParamsWithEquivalentLocations.
const (
	GetLocationNameParamsWithEquivalentLocationsN0 GetLocationNameParamsWithEquivalentLocations = "0"
	GetLocationNameParamsWithEquivalentLocationsN1 GetLocationNameParamsWithEquivalentLocations = "1"
)

// Defines values for GetLocationNameParamsRestrictSelection.
const (
	GetLocationNameParamsRestrictSelectionD GetLocationNameParamsRestrictSelection = "D"
	GetLocationNameParamsRestrictSelectionI GetLocationNameParamsRestrictSelection = "I"
	GetLocationNameParamsRestrictSelectionS GetLocationNameParamsRestrictSelection = "S"
	GetLocationNameParamsRestrictSelectionV GetLocationNameParamsRestrictSelection = "V"
)

// Defines values for GetLocationNameParamsWithProducts.
const (
	GetLocationNameParamsWithProductsN0 GetLocationNameParamsWithProducts = "0"
	GetLocationNameParamsWithProductsN1 GetLocationNameParamsWithProducts = "1"
)

// Defines values for GetLocationNameParamsProductRepresentatives.
const (
	GetLocationNameParamsProductRepresentativesN0 GetLocationNameParamsProductRepresentatives = "0"
	GetLocationNameParamsProductRepresentativesN1 GetLocationNameParamsProductRepresentatives = "1"
)

// Defines values for GetLocationNameParamsFilterMode.
const (
	DISTPERI GetLocationNameParamsFilterMode = "DIST_PERI"
	EXCLPERI GetLocationNameParamsFilterMode = "EXCL_PERI"
	SLCTPERI GetLocationNameParamsFilterMode = "SLCT_PERI"
)

// Defines values for GetLocationNearbystopsParamsFormat.
const (
	GetLocationNearbystopsParamsFormatJson  GetLocationNearbystopsParamsFormat = "json"
	GetLocationNearbystopsParamsFormatJsonp GetLocationNearbystopsParamsFormat = "jsonp"
	GetLocationNearbystopsParamsFormatXml   GetLocationNearbystopsParamsFormat = "xml"
)

// Defines values for GetLocationNearbystopsParamsType.
const (
	GetLocationNearbystopsParamsTypeP   GetLocationNearbystopsParamsType = "P"
	GetLocationNearbystopsParamsTypePE  GetLocationNearbystopsParamsType = "PE"
	GetLocationNearbystopsParamsTypeS   GetLocationNearbystopsParamsType = "S"
	GetLocationNearbystopsParamsTypeSE  GetLocationNearbystopsParamsType = "SE"
	GetLocationNearbystopsParamsTypeSP  GetLocationNearbystopsParamsType = "SP"
	GetLocationNearbystopsParamsTypeSPE GetLocationNearbystopsParamsType = "SPE"
)

// Defines values for GetLocationNearbystopsParamsLocationSelectionMode.
const (
	GetLocationNearbystopsParamsLocationSelectionModeSLCTA GetLocationNearbystopsParamsLocationSelectionMode = "SLCT_A"
	GetLocationNearbystopsParamsLocationSelectionModeSLCTN GetLocationNearbystopsParamsLocationSelectionMode = "SLCT_N"
)

// Defines values for GetReconParamsFormat.
const (
	GetReconParamsFormatJson  GetReconParamsFormat = "json"
	GetReconParamsFormatJsonp GetReconParamsFormat = "jsonp"
	GetReconParamsFormatXml   GetReconParamsFormat = "xml"
)

// Defines values for GetReconParamsPoly.
const (
	GetReconParamsPolyN0 GetReconParamsPoly = "0"
	GetReconParamsPolyN1 GetReconParamsPoly = "1"
)

// Defines values for GetReconParamsPolyEnc.
const (
	GetReconParamsPolyEncDLT GetReconParamsPolyEnc = "DLT"
	GetReconParamsPolyEncGPA GetReconParamsPolyEnc = "GPA"
	GetReconParamsPolyEncN   GetReconParamsPolyEnc = "N"
)

// Defines values for GetReconParamsUseCombinedComparison.
const (
	GetReconParamsUseCombinedComparisonN0 GetReconParamsUseCombinedComparison = "0"
	GetReconParamsUseCombinedComparisonN1 GetReconParamsUseCombinedComparison = "1"
)

// Defines values for GetReconParamsAcceptGaps.
const (
	GetReconParamsAcceptGapsN0 GetReconParamsAcceptGaps = "0"
	GetReconParamsAcceptGapsN1 GetReconParamsAcceptGaps = "1"
)

// Defines values for GetReconParamsAllowDummySections.
const (
	GetReconParamsAllowDummySectionsN0 GetReconParamsAllowDummySections = "0"
	GetReconParamsAllowDummySectionsN1 GetReconParamsAllowDummySections = "1"
)

// Defines values for GetReconParamsFlagAllNonReachable.
const (
	GetReconParamsFlagAllNonReachableN0 GetReconParamsFlagAllNonReachable = "0"
	GetReconParamsFlagAllNonReachableN1 GetReconParamsFlagAllNonReachable = "1"
)

// Defines values for GetReconParamsMatchCatStrict.
const (
	GetReconParamsMatchCatStrictN0 GetReconParamsMatchCatStrict = "0"
	GetReconParamsMatchCatStrictN1 GetReconParamsMatchCatStrict = "1"
)

// Defines values for GetReconParamsMatchIdNonBlank.
const (
	GetReconParamsMatchIdNonBlankN0 GetReconParamsMatchIdNonBlank = "0"
	GetReconParamsMatchIdNonBlankN1 GetReconParamsMatchIdNonBlank = "1"
)

// Defines values for GetReconParamsMatchIdStrict.
const (
	GetReconParamsMatchIdStrictN0 GetReconParamsMatchIdStrict = "0"
	GetReconParamsMatchIdStrictN1 GetReconParamsMatchIdStrict = "1"
)

// Defines values for GetReconParamsMatchNumStrict.
const (
	GetReconParamsMatchNumStrictN0 GetReconParamsMatchNumStrict = "0"
	GetReconParamsMatchNumStrictN1 GetReconParamsMatchNumStrict = "1"
)

// Defines values for GetReconParamsMatchRtType.
const (
	GetReconParamsMatchRtTypeN0 GetReconParamsMatchRtType = "0"
	GetReconParamsMatchRtTypeN1 GetReconParamsMatchRtType = "1"
)

// Defines values for GetReconParamsEnableRtFullSearch.
const (
	GetReconParamsEnableRtFullSearchN0 GetReconParamsEnableRtFullSearch = "0"
	GetReconParamsEnableRtFullSearchN1 GetReconParamsEnableRtFullSearch = "1"
)

// Defines values for GetReconParamsEnableReplacements.
const (
	GetReconParamsEnableReplacementsN0 GetReconParamsEnableReplacements = "0"
	GetReconParamsEnableReplacementsN1 GetReconParamsEnableReplacements = "1"
)

// Defines values for GetReconParamsPasslist.
const (
	GetReconParamsPasslistN0 GetReconParamsPasslist = "0"
	GetReconParamsPasslistN1 GetReconParamsPasslist = "1"
)

// Defines values for GetReconParamsShowPassingPoints.
const (
	GetReconParamsShowPassingPointsN0 GetReconParamsShowPassingPoints = "0"
	GetReconParamsShowPassingPointsN1 GetReconParamsShowPassingPoints = "1"
)

// Defines values for GetReconParamsRtMode.
const (
	GetReconParamsRtModeFULL          GetReconParamsRtMode = "FULL"
	GetReconParamsRtModeINFOS         GetReconParamsRtMode = "INFOS"
	GetReconParamsRtModeOFF           GetReconParamsRtMode = "OFF"
	GetReconParamsRtModeREALTIME      GetReconParamsRtMode = "REALTIME"
	GetReconParamsRtModeSERVERDEFAULT GetReconParamsRtMode = "SERVER_DEFAULT"
)

// Defines values for GetReconParamsBaim.
const (
	GetReconParamsBaimN0 GetReconParamsBaim = "0"
	GetReconParamsBaimN1 GetReconParamsBaim = "1"
)

// Defines values for GetReconParamsEco.
const (
	GetReconParamsEcoN0 GetReconParamsEco = "0"
	GetReconParamsEcoN1 GetReconParamsEco = "1"
)

// Defines values for GetReconParamsEcoCmp.
const (
	GetReconParamsEcoCmpN0 GetReconParamsEcoCmp = "0"
	GetReconParamsEcoCmpN1 GetReconParamsEcoCmp = "1"
)

// Defines values for GetReconParamsTariff.
const (
	GetReconParamsTariffN0 GetReconParamsTariff = "0"
	GetReconParamsTariffN1 GetReconParamsTariff = "1"
)

// Defines values for GetReconParamsTrafficMessages.
const (
	GetReconParamsTrafficMessagesN0 GetReconParamsTrafficMessages = "0"
	GetReconParamsTrafficMessagesN1 GetReconParamsTrafficMessages = "1"
)

// Defines values for GetReconParamsWithJourneyBoundaryPoints.
const (
	GetReconParamsWithJourneyBoundaryPointsN0 GetReconParamsWithJourneyBoundaryPoints = "0"
	GetReconParamsWithJourneyBoundaryPointsN1 GetReconParamsWithJourneyBoundaryPoints = "1"
)

// Defines values for GetSystemInfoParamsType.
const (
	Alive GetSystemInfoParamsType = "alive"
	Full  GetSystemInfoParamsType = "full"
	Ready GetSystemInfoParamsType = "ready"
)

// Defines values for GetTripParamsFormat.
const (
	GetTripParamsFormatJson  GetTripParamsFormat = "json"
	GetTripParamsFormatJsonp GetTripParamsFormat = "jsonp"
	GetTripParamsFormatXml   GetTripParamsFormat = "xml"
)

// Defines values for GetTripParamsOriginCoordType.
const (
	GetTripParamsOriginCoordTypeA   GetTripParamsOriginCoordType = "A"
	GetTripParamsOriginCoordTypeALL GetTripParamsOriginCoordType = "ALL"
	GetTripParamsOriginCoordTypeC   GetTripParamsOriginCoordType = "C"
	GetTripParamsOriginCoordTypeP   GetTripParamsOriginCoordType = "P"
	GetTripParamsOriginCoordTypeS   GetTripParamsOriginCoordType = "S"
)

// Defines values for GetTripParamsDestCoordType.
const (
	A   GetTripParamsDestCoordType = "A"
	ALL GetTripParamsDestCoordType = "ALL"
	C   GetTripParamsDestCoordType = "C"
	P   GetTripParamsDestCoordType = "P"
	S   GetTripParamsDestCoordType = "S"
)

// Defines values for GetTripParamsSearchForArrival.
const (
	GetTripParamsSearchForArrivalN0 GetTripParamsSearchForArrival = "0"
	GetTripParamsSearchForArrivalN1 GetTripParamsSearchForArrival = "1"
)

// Defines values for GetTripParamsPoly.
const (
	GetTripParamsPolyN0 GetTripParamsPoly = "0"
	GetTripParamsPolyN1 GetTripParamsPoly = "1"
)

// Defines values for GetTripParamsPolyEnc.
const (
	GetTripParamsPolyEncDLT GetTripParamsPolyEnc = "DLT"
	GetTripParamsPolyEncGPA GetTripParamsPolyEnc = "GPA"
	GetTripParamsPolyEncN   GetTripParamsPolyEnc = "N"
)

// Defines values for GetTripParamsPasslist.
const (
	GetTripParamsPasslistN0 GetTripParamsPasslist = "0"
	GetTripParamsPasslistN1 GetTripParamsPasslist = "1"
)

// Defines values for GetTripParamsIncludeIv.
const (
	GetTripParamsIncludeIvN0 GetTripParamsIncludeIv = "0"
	GetTripParamsIncludeIvN1 GetTripParamsIncludeIv = "1"
)

// Defines values for GetTripParamsIvOnly.
const (
	GetTripParamsIvOnlyN0 GetTripParamsIvOnly = "0"
	GetTripParamsIvOnlyN1 GetTripParamsIvOnly = "1"
)

// Defines values for GetTripParamsIncludeDrt.
const (
	GetTripParamsIncludeDrtN0 GetTripParamsIncludeDrt = "0"
	GetTripParamsIncludeDrtN1 GetTripParamsIncludeDrt = "1"
)

// Defines values for GetTripParamsBikeCarriage.
const (
	GetTripParamsBikeCarriageN0 GetTripParamsBikeCarriage = "0"
	GetTripParamsBikeCarriageN1 GetTripParamsBikeCarriage = "1"
)

// Defines values for GetTripParamsBikeCarriageType.
const (
	LARGEGROUPS GetTripParamsBikeCarriageType = "LARGEGROUPS"
	SINGLEBIKES GetTripParamsBikeCarriageType = "SINGLEBIKES"
	SMALLGROUPS GetTripParamsBikeCarriageType = "SMALLGROUPS"
)

// Defines values for GetTripParamsSleepingCar.
const (
	GetTripParamsSleepingCarN0 GetTripParamsSleepingCar = "0"
	GetTripParamsSleepingCarN1 GetTripParamsSleepingCar = "1"
)

// Defines values for GetTripParamsCouchetteCoach.
const (
	GetTripParamsCouchetteCoachN0 GetTripParamsCouchetteCoach = "0"
	GetTripParamsCouchetteCoachN1 GetTripParamsCouchetteCoach = "1"
)

// Defines values for GetTripParamsShowPassingPoints.
const (
	GetTripParamsShowPassingPointsN0 GetTripParamsShowPassingPoints = "0"
	GetTripParamsShowPassingPointsN1 GetTripParamsShowPassingPoints = "1"
)

// Defines values for GetTripParamsBaim.
const (
	GetTripParamsBaimN0 GetTripParamsBaim = "0"
	GetTripParamsBaimN1 GetTripParamsBaim = "1"
)

// Defines values for GetTripParamsEco.
const (
	GetTripParamsEcoN0 GetTripParamsEco = "0"
	GetTripParamsEcoN1 GetTripParamsEco = "1"
)

// Defines values for GetTripParamsEcoCmp.
const (
	GetTripParamsEcoCmpN0 GetTripParamsEcoCmp = "0"
	GetTripParamsEcoCmpN1 GetTripParamsEcoCmp = "1"
)

// Defines values for GetTripParamsRtMode.
const (
	FULL          GetTripParamsRtMode = "FULL"
	INFOS         GetTripParamsRtMode = "INFOS"
	OFF           GetTripParamsRtMode = "OFF"
	REALTIME      GetTripParamsRtMode = "REALTIME"
	SERVERDEFAULT GetTripParamsRtMode = "SERVER_DEFAULT"
)

// Defines values for GetTripParamsUnsharp.
const (
	GetTripParamsUnsharpN0 GetTripParamsUnsharp = "0"
	GetTripParamsUnsharpN1 GetTripParamsUnsharp = "1"
)

// Defines values for GetTripParamsEconomic.
const (
	GetTripParamsEconomicN0 GetTripParamsEconomic = "0"
	GetTripParamsEconomicN1 GetTripParamsEconomic = "1"
)

// Defines values for GetTripParamsAllowFootpathEquivalences.
const (
	GetTripParamsAllowFootpathEquivalencesN0 GetTripParamsAllowFootpathEquivalences = "0"
	GetTripParamsAllowFootpathEquivalencesN1 GetTripParamsAllowFootpathEquivalences = "1"
)

// Defines values for GetTripParamsTrainComposition.
const (
	GetTripParamsTrainCompositionN0 GetTripParamsTrainComposition = "0"
	GetTripParamsTrainCompositionN1 GetTripParamsTrainComposition = "1"
)

// Defines values for GetTripParamsIncludeEarlier.
const (
	GetTripParamsIncludeEarlierN0 GetTripParamsIncludeEarlier = "0"
	GetTripParamsIncludeEarlierN1 GetTripParamsIncludeEarlier = "1"
)

// Defines values for GetTripParamsWithICTAlternatives.
const (
	GetTripParamsWithICTAlternativesN0 GetTripParamsWithICTAlternatives = "0"
	GetTripParamsWithICTAlternativesN1 GetTripParamsWithICTAlternatives = "1"
)

// Defines values for GetTripParamsTariff.
const (
	GetTripParamsTariffN0 GetTripParamsTariff = "0"
	GetTripParamsTariffN1 GetTripParamsTariff = "1"
)

// Defines values for GetTripParamsTrafficMessages.
const (
	GetTripParamsTrafficMessagesN0 GetTripParamsTrafficMessages = "0"
	GetTripParamsTrafficMessagesN1 GetTripParamsTrafficMessages = "1"
)

// Defines values for GetTripParamsWithFreq.
const (
	GetTripParamsWithFreqN0 GetTripParamsWithFreq = "0"
	GetTripParamsWithFreqN1 GetTripParamsWithFreq = "1"
)

// Defines values for GetTripParamsWithJourneyBoundaryPoints.
const (
	N0 GetTripParamsWithJourneyBoundaryPoints = "0"
	N1 GetTripParamsWithJourneyBoundaryPoints = "1"
)

// AffectedStopType defines model for AffectedStopType.
type AffectedStopType struct {
	StopLocation []StopLocation `json:"StopLocation"`
}

// Arrival defines model for Arrival.
type Arrival struct {
	Directions           *Directions                  `json:"Directions,omitempty"`
	JourneyDetailRef     JourneyDetailRef             `json:"JourneyDetailRef"`
	JourneyStatus        *ArrivalJourneyStatus        `json:"JourneyStatus,omitempty"`
	Messages             *Messages                    `json:"Messages,omitempty"`
	Notes                *Notes                       `json:"Notes,omitempty"`
	Occupancy            *[]OccupancyType             `json:"Occupancy,omitempty"`
	Product              *[]ProductType               `json:"Product,omitempty"`
	ProductAtStop        *ProductType                 `json:"ProductAtStop,omitempty"`
	Stops                *Stops                       `json:"Stops,omitempty"`
	Alt                  *int32                       `json:"alt,omitempty"`
	AltId                *[]string                    `json:"altId,omitempty"`
	Cancelled            *bool                        `json:"cancelled,omitempty"`
	Date                 string                       `json:"date"`
	DirectionFlag        *string                      `json:"directionFlag,omitempty"`
	Entry                *bool                        `json:"entry,omitempty"`
	HasMainMast          *bool                        `json:"hasMainMast,omitempty"`
	IsBorderStop         *bool                        `json:"isBorderStop,omitempty"`
	IsMainMast           *bool                        `json:"isMainMast,omitempty"`
	IsTurningPoint       *bool                        `json:"isTurningPoint,omitempty"`
	Lat                  *float32                     `json:"lat,omitempty"`
	Lon                  *float32                     `json:"lon,omitempty"`
	MainMast             *StopLocation                `json:"mainMast,omitempty"`
	MainMastAlt          *int32                       `json:"mainMastAlt,omitempty"`
	MainMastAltId        *[]string                    `json:"mainMastAltId,omitempty"`
	MainMastExtId        *string                      `json:"mainMastExtId,omitempty"`
	MainMastId           *string                      `json:"mainMastId,omitempty"`
	MainMastLat          *float32                     `json:"mainMastLat,omitempty"`
	MainMastLon          *float32                     `json:"mainMastLon,omitempty"`
	Name                 string                       `json:"name"`
	Origin               *string                      `json:"origin,omitempty"`
	PartCancelled        *bool                        `json:"partCancelled,omitempty"`
	Platform             *PlatformType                `json:"platform,omitempty"`
	PrognosisType        *ArrivalPrognosisType        `json:"prognosisType,omitempty"`
	Reachable            *bool                        `json:"reachable,omitempty"`
	Redirected           *bool                        `json:"redirected,omitempty"`
	ReferencedJourney    *[]ReferencedJourneyType     `json:"referencedJourney,omitempty"`
	RtCnclDataSourceType *ArrivalRtCnclDataSourceType `json:"rtCnclDataSourceType,omitempty"`
	RtDate               *string                      `json:"rtDate,omitempty"`
	RtPlatform           *PlatformType                `json:"rtPlatform,omitempty"`
	RtTime               *string                      `json:"rtTime,omitempty"`
	RtTrack              *string                      `json:"rtTrack,omitempty"`
	RtTrackHidden        *bool                        `json:"rtTrackHidden,omitempty"`
	RtTz                 *int32                       `json:"rtTz,omitempty"`
	ScheduledTimeChanged *bool                        `json:"scheduledTimeChanged,omitempty"`
	Stop                 string                       `json:"stop"`
	StopExtId            *string                      `json:"stopExtId,omitempty"`
	Stopid               string                       `json:"stopid"`
	Time                 string                       `json:"time"`
	Track                *string                      `json:"track,omitempty"`
	TrackHidden          *bool                        `json:"trackHidden,omitempty"`
	Type                 string                       `json:"type"`
	Tz                   *int32                       `json:"tz,omitempty"`
	UncertainDelay       *bool                        `json:"uncertainDelay,omitempty"`
}

// ArrivalJourneyStatus defines model for Arrival.JourneyStatus.
type ArrivalJourneyStatus string

// ArrivalPrognosisType defines model for Arrival.PrognosisType.
type ArrivalPrognosisType string

// ArrivalRtCnclDataSourceType defines model for Arrival.RtCnclDataSourceType.
type ArrivalRtCnclDataSourceType string

// ArrivalBoard defines model for ArrivalBoard.
type ArrivalBoard struct {
	Arrival              *[]Arrival         `json:"Arrival,omitempty"`
	Message              *[]Message         `json:"Message,omitempty"`
	TechnicalMessages    *TechnicalMessages `json:"TechnicalMessages,omitempty"`
	Warnings             *Warnings          `json:"Warnings,omitempty"`
	DialectVersion       *string            `json:"dialectVersion,omitempty"`
	ErrorCode            *string            `json:"errorCode,omitempty"`
	ErrorText            *string            `json:"errorText,omitempty"`
	InternalErrorCode    *string            `json:"internalErrorCode,omitempty"`
	InternalErrorText    *string            `json:"internalErrorText,omitempty"`
	InternalErrorTextOut *string            `json:"internalErrorTextOut,omitempty"`
	PlanRtTs             *time.Time         `json:"planRtTs,omitempty"`
	RequestId            *string            `json:"requestId,omitempty"`
	ServerVersion        *string            `json:"serverVersion,omitempty"`
	StopExtId            *string            `json:"stopExtId,omitempty"`
	Stopid               *string            `json:"stopid,omitempty"`
	Version              *string            `json:"version,omitempty"`
}

// CombinedProductType defines model for CombinedProductType.
type CombinedProductType struct {
	Product []ProductType `json:"Product"`
}

// ConnectionReliabilityType defines model for ConnectionReliabilityType.
type ConnectionReliabilityType struct {
	Alternative *ConnectionReliabilityTypeAlternative `json:"alternative,omitempty"`
	Original    *ConnectionReliabilityTypeOriginal    `json:"original,omitempty"`
}

// ConnectionReliabilityTypeAlternative defines model for ConnectionReliabilityType.Alternative.
type ConnectionReliabilityTypeAlternative string

// ConnectionReliabilityTypeOriginal defines model for ConnectionReliabilityType.Original.
type ConnectionReliabilityTypeOriginal string

// CoordLocation defines model for CoordLocation.
type CoordLocation struct {
	LocationNotes      *LocationNotes            `json:"LocationNotes,omitempty"`
	Alt                *int32                    `json:"alt,omitempty"`
	ChildLocation      *[]CoordLocation          `json:"childLocation,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	Dist               *int32                    `json:"dist,omitempty"`
	EntryLocation      *[]CoordLocation          `json:"entryLocation,omitempty"`
	ExtId              *string                   `json:"extId,omitempty"`
	Icon               *IconType                 `json:"icon,omitempty"`
	Id                 *string                   `json:"id,omitempty"`
	Lat                *float32                  `json:"lat,omitempty"`
	Links              *[]ResourceLinks          `json:"links,omitempty"`
	Lon                *float32                  `json:"lon,omitempty"`
	MatchValue         *int32                    `json:"matchValue,omitempty"`
	Name               string                    `json:"name"`
	Refinable          *bool                     `json:"refinable,omitempty"`
	Type               string                    `json:"type"`
	WeatherInformation *[]WeatherInformationType `json:"weatherInformation,omitempty"`
}

// Coordinate defines model for Coordinate.
type Coordinate struct {
	Alt *int32  `json:"alt,omitempty"`
	Lat float32 `json:"lat"`
	Lon float32 `json:"lon"`
}

// Departure defines model for Departure.
type Departure struct {
	Directions           *Directions                    `json:"Directions,omitempty"`
	JourneyDetailRef     JourneyDetailRef               `json:"JourneyDetailRef"`
	JourneyStatus        *DepartureJourneyStatus        `json:"JourneyStatus,omitempty"`
	Messages             *Messages                      `json:"Messages,omitempty"`
	Notes                *Notes                         `json:"Notes,omitempty"`
	Occupancy            *[]OccupancyType               `json:"Occupancy,omitempty"`
	ParallelJourneyRef   *[]ParallelJourneyRefType      `json:"ParallelJourneyRef,omitempty"`
	Product              *[]ProductType                 `json:"Product,omitempty"`
	ProductAtStop        *ProductType                   `json:"ProductAtStop,omitempty"`
	Stops                *Stops                         `json:"Stops,omitempty"`
	Alt                  *int32                         `json:"alt,omitempty"`
	AltId                *[]string                      `json:"altId,omitempty"`
	Cancelled            *bool                          `json:"cancelled,omitempty"`
	Date                 string                         `json:"date"`
	DateAtArrival        *string                        `json:"dateAtArrival,omitempty"`
	Direction            *string                        `json:"direction,omitempty"`
	DirectionExtId       *string                        `json:"directionExtId,omitempty"`
	DirectionFlag        *string                        `json:"directionFlag,omitempty"`
	Entry                *bool                          `json:"entry,omitempty"`
	HasMainMast          *bool                          `json:"hasMainMast,omitempty"`
	IsBorderStop         *bool                          `json:"isBorderStop,omitempty"`
	IsFastest            *bool                          `json:"isFastest,omitempty"`
	IsMainMast           *bool                          `json:"isMainMast,omitempty"`
	IsTurningPoint       *bool                          `json:"isTurningPoint,omitempty"`
	Lat                  *float32                       `json:"lat,omitempty"`
	Lon                  *float32                       `json:"lon,omitempty"`
	MainMast             *StopLocation                  `json:"mainMast,omitempty"`
	MainMastAlt          *int32                         `json:"mainMastAlt,omitempty"`
	MainMastAltId        *[]string                      `json:"mainMastAltId,omitempty"`
	MainMastExtId        *string                        `json:"mainMastExtId,omitempty"`
	MainMastId           *string                        `json:"mainMastId,omitempty"`
	MainMastLat          *float32                       `json:"mainMastLat,omitempty"`
	MainMastLon          *float32                       `json:"mainMastLon,omitempty"`
	Name                 string                         `json:"name"`
	PartCancelled        *bool                          `json:"partCancelled,omitempty"`
	Platform             *PlatformType                  `json:"platform,omitempty"`
	PrognosisType        *DeparturePrognosisType        `json:"prognosisType,omitempty"`
	Reachable            *bool                          `json:"reachable,omitempty"`
	Redirected           *bool                          `json:"redirected,omitempty"`
	ReferencedJourney    *[]ReferencedJourneyType       `json:"referencedJourney,omitempty"`
	RtCnclDataSourceType *DepartureRtCnclDataSourceType `json:"rtCnclDataSourceType,omitempty"`
	RtDate               *string                        `json:"rtDate,omitempty"`
	RtDateAtArrival      *string                        `json:"rtDateAtArrival,omitempty"`
	RtPlatform           *PlatformType                  `json:"rtPlatform,omitempty"`
	RtTime               *string                        `json:"rtTime,omitempty"`
	RtTimeAtArrival      *string                        `json:"rtTimeAtArrival,omitempty"`
	RtTrack              *string                        `json:"rtTrack,omitempty"`
	RtTrackHidden        *bool                          `json:"rtTrackHidden,omitempty"`
	RtTz                 *int32                         `json:"rtTz,omitempty"`
	ScheduledTimeChanged *bool                          `json:"scheduledTimeChanged,omitempty"`
	Stop                 string                         `json:"stop"`
	StopExtId            *string                        `json:"stopExtId,omitempty"`
	Stopid               string                         `json:"stopid"`
	Time                 string                         `json:"time"`
	TimeAtArrival        *string                        `json:"timeAtArrival,omitempty"`
	Track                *string                        `json:"track,omitempty"`
	TrackHidden          *bool                          `json:"trackHidden,omitempty"`
	Type                 string                         `json:"type"`
	Tz                   *int32                         `json:"tz,omitempty"`
	UncertainDelay       *bool                          `json:"uncertainDelay,omitempty"`
}

// DepartureJourneyStatus defines model for Departure.JourneyStatus.
type DepartureJourneyStatus string

// DeparturePrognosisType defines model for Departure.PrognosisType.
type DeparturePrognosisType string

// DepartureRtCnclDataSourceType defines model for Departure.RtCnclDataSourceType.
type DepartureRtCnclDataSourceType string

// DepartureBoard defines model for DepartureBoard.
type DepartureBoard struct {
	Departure            *[]Departure       `json:"Departure,omitempty"`
	Message              *[]Message         `json:"Message,omitempty"`
	TechnicalMessages    *TechnicalMessages `json:"TechnicalMessages,omitempty"`
	Warnings             *Warnings          `json:"Warnings,omitempty"`
	DialectVersion       *string            `json:"dialectVersion,omitempty"`
	ErrorCode            *string            `json:"errorCode,omitempty"`
	ErrorText            *string            `json:"errorText,omitempty"`
	InternalErrorCode    *string            `json:"internalErrorCode,omitempty"`
	InternalErrorText    *string            `json:"internalErrorText,omitempty"`
	InternalErrorTextOut *string            `json:"internalErrorTextOut,omitempty"`
	PlanRtTs             *time.Time         `json:"planRtTs,omitempty"`
	RequestId            *string            `json:"requestId,omitempty"`
	ServerVersion        *string            `json:"serverVersion,omitempty"`
	StopExtId            *string            `json:"stopExtId,omitempty"`
	Stopid               *string            `json:"stopid,omitempty"`
	Version              *string            `json:"version,omitempty"`
}

// Direction defines model for Direction.
type Direction struct {
	Flag         *string `json:"flag,omitempty"`
	RouteIdxFrom *int32  `json:"routeIdxFrom,omitempty"`
	RouteIdxTo   *int32  `json:"routeIdxTo,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// Directions defines model for Directions.
type Directions struct {
	Direction []Direction `json:"Direction"`
}

// EcoType defines model for EcoType.
type EcoType struct {
	Co2         *float64     `json:"co2,omitempty"`
	Co2el       *float64     `json:"co2el,omitempty"`
	Co2f        *float64     `json:"co2f,omitempty"`
	Dist        *int32       `json:"dist,omitempty"`
	Dur         *string      `json:"dur,omitempty"`
	Nmhc        *float64     `json:"nmhc,omitempty"`
	Nmvoc       *float64     `json:"nmvoc,omitempty"`
	Nox         *float64     `json:"nox,omitempty"`
	Part        *float64     `json:"part,omitempty"`
	Part10      *float64     `json:"part10,omitempty"`
	PartV       *float64     `json:"partV,omitempty"`
	Prime       *float64     `json:"prime,omitempty"`
	PrimeEnergy *float64     `json:"primeEnergy,omitempty"`
	Primef      *float64     `json:"primef,omitempty"`
	Rating      *int32       `json:"rating,omitempty"`
	So2         *float64     `json:"so2,omitempty"`
	Type        *EcoTypeType `json:"type,omitempty"`
	Ubp         *float64     `json:"ubp,omitempty"`
	Ubp13       *float64     `json:"ubp13,omitempty"`
}

// EcoTypeType defines model for EcoType.Type.
type EcoTypeType string

// ExternalContentType defines model for ExternalContentType.
type ExternalContentType struct {
	Content      *map[string]interface{} `json:"content,omitempty"`
	ContentType  *string                 `json:"contentType,omitempty"`
	Icon         *IconType               `json:"icon,omitempty"`
	Provider     *string                 `json:"provider,omitempty"`
	ProviderName *string                 `json:"providerName,omitempty"`
	Text         *string                 `json:"text,omitempty"`
}

// ExternalMessageInformationType defines model for ExternalMessageInformationType.
type ExternalMessageInformationType struct {
	ExtId    *string `json:"extId,omitempty"`
	ExtIdSrc *string `json:"extIdSrc,omitempty"`
}

// FareItem defines model for FareItem.
type FareItem struct {
	Cur             *string              `json:"cur,omitempty"`
	Desc            *string              `json:"desc,omitempty"`
	ExternalContent *ExternalContentType `json:"externalContent,omitempty"`
	FromLeg         *int32               `json:"fromLeg,omitempty"`
	FromLegId       *string              `json:"fromLegId,omitempty"`
	Name            *string              `json:"name,omitempty"`
	Param           *[]KVType            `json:"param,omitempty"`
	Price           *int32               `json:"price,omitempty"`
	ShpCtx          *string              `json:"shpCtx,omitempty"`
	Ticket          *[]Ticket            `json:"ticket,omitempty"`
	ToLeg           *int32               `json:"toLeg,omitempty"`
	ToLegId         *string              `json:"toLegId,omitempty"`
}

// FareSetItem defines model for FareSetItem.
type FareSetItem struct {
	Desc      *string     `json:"desc,omitempty"`
	FareItem  *[]FareItem `json:"fareItem,omitempty"`
	FromLeg   *int32      `json:"fromLeg,omitempty"`
	FromLegId *string     `json:"fromLegId,omitempty"`
	Name      *string     `json:"name,omitempty"`
	Param     *[]KVType   `json:"param,omitempty"`
	ToLeg     *int32      `json:"toLeg,omitempty"`
	ToLegId   *string     `json:"toLegId,omitempty"`
}

// FreqType defines model for FreqType.
type FreqType struct {
	AlternativeCount *int32         `json:"alternativeCount,omitempty"`
	Journey          *[]JourneyType `json:"journey,omitempty"`
	WaitMaximum      *int32         `json:"waitMaximum,omitempty"`
	WaitMinimum      *int32         `json:"waitMinimum,omitempty"`
}

// GisEdgeType defines model for GisEdgeType.
type GisEdgeType struct {
	EdgeId  *string `json:"edgeId,omitempty"`
	GraphId *string `json:"graphId,omitempty"`
}

// GisRef defines model for GisRef.
type GisRef struct {
	Ref string `json:"ref"`
}

// GisRouteSegment defines model for GisRouteSegment.
type GisRouteSegment struct {
	Edge           *[]GisEdgeType        `json:"Edge,omitempty"`
	Messages       *Messages             `json:"Messages,omitempty"`
	Notes          *Notes                `json:"Notes,omitempty"`
	TrafficMessage *[]TrafficMessageType `json:"TrafficMessage,omitempty"`
	DirTx          *string               `json:"dirTx,omitempty"`
	Dist           *int32                `json:"dist,omitempty"`
	DurS           *string               `json:"durS,omitempty"`
	Man            *GisRouteSegmentMan   `json:"man,omitempty"`
	ManTargetName  *string               `json:"manTargetName,omitempty"`
	ManTx          *string               `json:"manTx,omitempty"`
	Name           *string               `json:"name,omitempty"`
	Ori            *GisRouteSegmentOri   `json:"ori,omitempty"`
	PolyE          *int32                `json:"polyE,omitempty"`
	PolyS          *int32                `json:"polyS,omitempty"`
	RNum           *string               `json:"rNum,omitempty"`
	RType          *GisRouteSegmentRType `json:"rType,omitempty"`
}

// GisRouteSegmentMan defines model for GisRouteSegment.Man.
type GisRouteSegmentMan string

// GisRouteSegmentOri defines model for GisRouteSegment.Ori.
type GisRouteSegmentOri string

// GisRouteSegmentRType defines model for GisRouteSegment.RType.
type GisRouteSegmentRType string

// GisRouteType defines model for GisRouteType.
type GisRouteType struct {
	Notes            *Notes             `json:"Notes,omitempty"`
	AltPolyline      *[]Polyline        `json:"altPolyline,omitempty"`
	AltPolylineGroup *[]PolylineGroup   `json:"altPolylineGroup,omitempty"`
	DirGeo           *int32             `json:"dirGeo,omitempty"`
	DirTxt           *string            `json:"dirTxt,omitempty"`
	Dist             *int32             `json:"dist,omitempty"`
	DurR             *string            `json:"durR,omitempty"`
	DurS             *string            `json:"durS,omitempty"`
	DurST            *string            `json:"durST,omitempty"`
	DurW2C           *string            `json:"durW2C,omitempty"`
	DurW2D           *string            `json:"durW2D,omitempty"`
	EdgeHashR        *string            `json:"edgeHashR,omitempty"`
	EdgeHashS        *string            `json:"edgeHashS,omitempty"`
	Polyline         *Polyline          `json:"polyline,omitempty"`
	PolylineGroup    *PolylineGroup     `json:"polylineGroup,omitempty"`
	Seg              *[]GisRouteSegment `json:"seg,omitempty"`
	TotDownhill      *float64           `json:"totDownhill,omitempty"`
	TotUphill        *float64           `json:"totUphill,omitempty"`
}

// HimMessages defines model for HimMessages.
type HimMessages struct {
	Message              *[]Message         `json:"Message,omitempty"`
	TechnicalMessages    *TechnicalMessages `json:"TechnicalMessages,omitempty"`
	Warnings             *Warnings          `json:"Warnings,omitempty"`
	DialectVersion       *string            `json:"dialectVersion,omitempty"`
	ErrorCode            *string            `json:"errorCode,omitempty"`
	ErrorText            *string            `json:"errorText,omitempty"`
	InternalErrorCode    *string            `json:"internalErrorCode,omitempty"`
	InternalErrorText    *string            `json:"internalErrorText,omitempty"`
	InternalErrorTextOut *string            `json:"internalErrorTextOut,omitempty"`
	PlanRtTs             *time.Time         `json:"planRtTs,omitempty"`
	RequestId            *string            `json:"requestId,omitempty"`
	ServerVersion        *string            `json:"serverVersion,omitempty"`
	Version              *string            `json:"version,omitempty"`
}

// IconType defines model for IconType.
type IconType struct {
	BackgroundColor *RGBAColorType `json:"backgroundColor,omitempty"`
	BorderColor     *RGBAColorType `json:"borderColor,omitempty"`
	ForegroundColor *RGBAColorType `json:"foregroundColor,omitempty"`
	Res             *string        `json:"res,omitempty"`
	Shape           *IconTypeShape `json:"shape,omitempty"`
	ShapeRes        *string        `json:"shapeRes,omitempty"`
	Style           *IconTypeStyle `json:"style,omitempty"`
	Txt             *string        `json:"txt,omitempty"`
	TxtS            *string        `json:"txtS,omitempty"`
}

// IconTypeShape defines model for IconType.Shape.
type IconTypeShape string

// IconTypeStyle defines model for IconType.Style.
type IconTypeStyle string

// JourneyDetail defines model for JourneyDetail.
type JourneyDetail struct {
	Directions              *Directions                           `json:"Directions,omitempty"`
	JourneyStatus           *JourneyDetailJourneyStatus           `json:"JourneyStatus,omitempty"`
	Messages                *Messages                             `json:"Messages,omitempty"`
	Names                   *Names                                `json:"Names,omitempty"`
	Notes                   *Notes                                `json:"Notes,omitempty"`
	ParallelJourneyRef      *[]ParallelJourneyRefType             `json:"ParallelJourneyRef,omitempty"`
	Polyline                *Polyline                             `json:"Polyline,omitempty"`
	PolylineGroup           *PolylineGroup                        `json:"PolylineGroup,omitempty"`
	Product                 *[]ProductType                        `json:"Product,omitempty"`
	ServiceDays             *[]ServiceDays                        `json:"ServiceDays,omitempty"`
	Stops                   Stops                                 `json:"Stops"`
	TechnicalMessages       *TechnicalMessages                    `json:"TechnicalMessages,omitempty"`
	Warnings                *Warnings                             `json:"Warnings,omitempty"`
	Cancelled               *bool                                 `json:"cancelled,omitempty"`
	DayOfOperation          string                                `json:"dayOfOperation"`
	DialectVersion          *string                               `json:"dialectVersion,omitempty"`
	ErrorCode               *string                               `json:"errorCode,omitempty"`
	ErrorText               *string                               `json:"errorText,omitempty"`
	InternalErrorCode       *string                               `json:"internalErrorCode,omitempty"`
	InternalErrorText       *string                               `json:"internalErrorText,omitempty"`
	InternalErrorTextOut    *string                               `json:"internalErrorTextOut,omitempty"`
	LastPassRouteIdx        *int32                                `json:"lastPassRouteIdx,omitempty"`
	LastPassStopRef         *int32                                `json:"lastPassStopRef,omitempty"`
	LastPos                 *Coordinate                           `json:"lastPos,omitempty"`
	LastPosReported         *time.Time                            `json:"lastPosReported,omitempty"`
	ParallelJourneyLinkType *JourneyDetailParallelJourneyLinkType `json:"parallelJourneyLinkType,omitempty"`
	PartCancelled           *bool                                 `json:"partCancelled,omitempty"`
	PlanRtTs                *time.Time                            `json:"planRtTs,omitempty"`
	Reachable               *bool                                 `json:"reachable,omitempty"`
	Redirected              *bool                                 `json:"redirected,omitempty"`
	Ref                     string                                `json:"ref"`
	ReferencedJourney       *[]ReferencedJourneyType              `json:"referencedJourney,omitempty"`
	RequestId               *string                               `json:"requestId,omitempty"`
	RtLastPassRouteIdx      *int32                                `json:"rtLastPassRouteIdx,omitempty"`
	RtLastPassStopRef       *int32                                `json:"rtLastPassStopRef,omitempty"`
	ServerVersion           *string                               `json:"serverVersion,omitempty"`
	UncertainDelay          *bool                                 `json:"uncertainDelay,omitempty"`
	Version                 *string                               `json:"version,omitempty"`
}

// JourneyDetailJourneyStatus defines model for JourneyDetail.JourneyStatus.
type JourneyDetailJourneyStatus string

// JourneyDetailParallelJourneyLinkType defines model for JourneyDetail.ParallelJourneyLinkType.
type JourneyDetailParallelJourneyLinkType string

// JourneyDetailRef defines model for JourneyDetailRef.
type JourneyDetailRef struct {
	Ref string `json:"ref"`
}

// JourneyList defines model for JourneyList.
type JourneyList struct {
	Journey              *[]JourneyType     `json:"Journey,omitempty"`
	TechnicalMessages    *TechnicalMessages `json:"TechnicalMessages,omitempty"`
	Warnings             *Warnings          `json:"Warnings,omitempty"`
	DialectVersion       *string            `json:"dialectVersion,omitempty"`
	ErrorCode            *string            `json:"errorCode,omitempty"`
	ErrorText            *string            `json:"errorText,omitempty"`
	InternalErrorCode    *string            `json:"internalErrorCode,omitempty"`
	InternalErrorText    *string            `json:"internalErrorText,omitempty"`
	InternalErrorTextOut *string            `json:"internalErrorTextOut,omitempty"`
	PlanRtTs             *time.Time         `json:"planRtTs,omitempty"`
	PlanningPeriodBegin  *string            `json:"planningPeriodBegin,omitempty"`
	PlanningPeriodEnd    *string            `json:"planningPeriodEnd,omitempty"`
	RequestId            *string            `json:"requestId,omitempty"`
	ServerVersion        *string            `json:"serverVersion,omitempty"`
	Version              *string            `json:"version,omitempty"`
}

// JourneyPathItemType defines model for JourneyPathItemType.
type JourneyPathItemType struct {
	DirGeo            *int32                    `json:"dirGeo,omitempty"`
	FromLocationId    *string                   `json:"fromLocationId,omitempty"`
	ProgressAbs       *int32                    `json:"progressAbs,omitempty"`
	ProgressInPercent *int32                    `json:"progressInPercent,omitempty"`
	ProgressInTime    *int32                    `json:"progressInTime,omitempty"`
	State             *JourneyPathItemTypeState `json:"state,omitempty"`
	ToLocationId      *string                   `json:"toLocationId,omitempty"`
}

// JourneyPathItemTypeState defines model for JourneyPathItemType.State.
type JourneyPathItemTypeState string

// JourneyPathType defines model for JourneyPathType.
type JourneyPathType struct {
	JourneyPathItem []JourneyPathItemType `json:"JourneyPathItem"`
	Location        *[]StopType           `json:"Location,omitempty"`
	PolylineGroup   *PolylineGroup        `json:"PolylineGroup,omitempty"`
}

// JourneyType defines model for JourneyType.
type JourneyType struct {
	JourneyDestination      *OriginDestType                     `json:"JourneyDestination,omitempty"`
	JourneyDetailRef        *JourneyDetailRef                   `json:"JourneyDetailRef,omitempty"`
	JourneyOrigin           *OriginDestType                     `json:"JourneyOrigin,omitempty"`
	JourneyPath             *JourneyPathType                    `json:"JourneyPath,omitempty"`
	Messages                *Messages                           `json:"Messages,omitempty"`
	Notes                   *Notes                              `json:"Notes,omitempty"`
	Occupancy               *[]OccupancyType                    `json:"Occupancy,omitempty"`
	ParallelJourneyRef      *[]ParallelJourneyRefType           `json:"ParallelJourneyRef,omitempty"`
	Product                 *ProductType                        `json:"Product,omitempty"`
	Stops                   *Stops                              `json:"Stops,omitempty"`
	AddName                 *string                             `json:"addName,omitempty"`
	Alt                     *int32                              `json:"alt,omitempty"`
	Direction               *string                             `json:"direction,omitempty"`
	DirectionFlag           *string                             `json:"directionFlag,omitempty"`
	Lat                     *float32                            `json:"lat,omitempty"`
	Lon                     *float32                            `json:"lon,omitempty"`
	Name                    string                              `json:"name"`
	ParallelJourneyLinkType *JourneyTypeParallelJourneyLinkType `json:"parallelJourneyLinkType,omitempty"`
	ReferencedJourney       *[]ReferencedJourneyType            `json:"referencedJourney,omitempty"`
	TrainCategory           *string                             `json:"trainCategory,omitempty"`
	TrainNumber             *string                             `json:"trainNumber,omitempty"`
}

// JourneyTypeParallelJourneyLinkType defines model for JourneyType.ParallelJourneyLinkType.
type JourneyTypeParallelJourneyLinkType string

// KVType defines model for KVType.
type KVType struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// Leg defines model for Leg.
type Leg struct {
	CombinedProduct       *[]CombinedProductType    `json:"CombinedProduct,omitempty"`
	Destination           OriginDestType            `json:"Destination"`
	Freq                  *FreqType                 `json:"Freq,omitempty"`
	GisRef                *GisRef                   `json:"GisRef,omitempty"`
	GisRoute              *GisRouteType             `json:"GisRoute,omitempty"`
	JourneyDestination    *OriginDestType           `json:"JourneyDestination,omitempty"`
	JourneyDetail         *JourneyDetail            `json:"JourneyDetail,omitempty"`
	JourneyDetailRef      *JourneyDetailRef         `json:"JourneyDetailRef,omitempty"`
	JourneyOrigin         *OriginDestType           `json:"JourneyOrigin,omitempty"`
	JourneyStatus         *LegJourneyStatus         `json:"JourneyStatus,omitempty"`
	Messages              *Messages                 `json:"Messages,omitempty"`
	Notes                 *Notes                    `json:"Notes,omitempty"`
	Occupancy             *[]OccupancyType          `json:"Occupancy,omitempty"`
	Origin                OriginDestType            `json:"Origin"`
	ParallelJourney       *[]JourneyType            `json:"ParallelJourney,omitempty"`
	ParallelJourneyRef    *[]ParallelJourneyRefType `json:"ParallelJourneyRef,omitempty"`
	Polyline              *Polyline                 `json:"Polyline,omitempty"`
	PolylineGroup         *PolylineGroup            `json:"PolylineGroup,omitempty"`
	Product               *[]ProductType            `json:"Product,omitempty"`
	ServiceDays           *[]ServiceDays            `json:"ServiceDays,omitempty"`
	Stops                 *Stops                    `json:"Stops,omitempty"`
	TrafficMessage        *[]TrafficMessageType     `json:"TrafficMessage,omitempty"`
	AddName               *string                   `json:"addName,omitempty"`
	Cancelled             *bool                     `json:"cancelled,omitempty"`
	Category              *string                   `json:"category,omitempty"`
	ChangeAssured         *bool                     `json:"changeAssured,omitempty"`
	ChangeRequired        *bool                     `json:"changeRequired,omitempty"`
	Direction             *string                   `json:"direction,omitempty"`
	DirectionFlag         *string                   `json:"directionFlag,omitempty"`
	Dist                  *int32                    `json:"dist,omitempty"`
	Duration              *string                   `json:"duration,omitempty"`
	Hide                  *bool                     `json:"hide,omitempty"`
	Id                    string                    `json:"id"`
	Idx                   int32                     `json:"idx"`
	MinimumChangeDuration *string                   `json:"minimumChangeDuration,omitempty"`
	Name                  *string                   `json:"name,omitempty"`
	Number                *string                   `json:"number,omitempty"`
	PartCancelled         *bool                     `json:"partCancelled,omitempty"`
	PsCtxArriveEarlier    *string                   `json:"psCtxArriveEarlier,omitempty"`
	PsCtxDepartLater      *string                   `json:"psCtxDepartLater,omitempty"`
	Reachable             *bool                     `json:"reachable,omitempty"`
	RecState              *LegRecState              `json:"recState,omitempty"`
	Redirected            *bool                     `json:"redirected,omitempty"`
	ReferencedJourney     *[]ReferencedJourneyType  `json:"referencedJourney,omitempty"`
	Type                  string                    `json:"type"`
	UncertainDelay        *bool                     `json:"uncertainDelay,omitempty"`
	Waiting               *bool                     `json:"waiting,omitempty"`
	WaitingState          *LegWaitingState          `json:"waitingState,omitempty"`
}

// LegJourneyStatus defines model for Leg.JourneyStatus.
type LegJourneyStatus string

// LegRecState defines model for Leg.RecState.
type LegRecState string

// LegWaitingState defines model for Leg.WaitingState.
type LegWaitingState string

// LegList defines model for LegList.
type LegList struct {
	Leg *[]Leg `json:"Leg,omitempty"`
}

// Location defines model for Location.
type Location struct {
	Note  *[]LocationNote `json:"Note,omitempty"`
	Alt   *int32          `json:"alt,omitempty"`
	ExtId *string         `json:"extId,omitempty"`
	Id    *string         `json:"id,omitempty"`
	Lat   *float32        `json:"lat,omitempty"`
	Lon   *float32        `json:"lon,omitempty"`
	Name  *string         `json:"name,omitempty"`
	Type  *string         `json:"type,omitempty"`
}

// LocationList defines model for LocationList.
type LocationList struct {
	TechnicalMessages           *TechnicalMessages        `json:"TechnicalMessages,omitempty"`
	Warnings                    *Warnings                 `json:"Warnings,omitempty"`
	DialectVersion              *string                   `json:"dialectVersion,omitempty"`
	ErrorCode                   *string                   `json:"errorCode,omitempty"`
	ErrorText                   *string                   `json:"errorText,omitempty"`
	InternalErrorCode           *string                   `json:"internalErrorCode,omitempty"`
	InternalErrorText           *string                   `json:"internalErrorText,omitempty"`
	InternalErrorTextOut        *string                   `json:"internalErrorTextOut,omitempty"`
	PlanRtTs                    *time.Time                `json:"planRtTs,omitempty"`
	RequestId                   *string                   `json:"requestId,omitempty"`
	ScrollCtx                   *[]string                 `json:"scrollCtx,omitempty"`
	ServerVersion               *string                   `json:"serverVersion,omitempty"`
	StopLocationOrCoordLocation *[]map[string]interface{} `json:"stopLocationOrCoordLocation,omitempty"`
	Version                     *string                   `json:"version,omitempty"`
}

// LocationNote defines model for LocationNote.
type LocationNote struct {
	Key           *string           `json:"key,omitempty"`
	RtActivated   *bool             `json:"rtActivated,omitempty"`
	RtDeactivated *bool             `json:"rtDeactivated,omitempty"`
	TxtL          *string           `json:"txtL,omitempty"`
	TxtN          *string           `json:"txtN,omitempty"`
	TxtS          *string           `json:"txtS,omitempty"`
	Type          *LocationNoteType `json:"type,omitempty"`
	Url           *string           `json:"url,omitempty"`
	Value         *string           `json:"value,omitempty"`
}

// LocationNoteType defines model for LocationNote.Type.
type LocationNoteType string

// LocationNotes defines model for LocationNotes.
type LocationNotes struct {
	LocationNote []LocationNote `json:"LocationNote"`
}

// Message defines model for Message.
type Message struct {
	Note            *[]Note                         `json:"Note,omitempty"`
	Act             *bool                           `json:"act,omitempty"`
	AffectedJourney *[]JourneyType                  `json:"affectedJourney,omitempty"`
	AffectedProduct *[]ProductType                  `json:"affectedProduct,omitempty"`
	AffectedStops   *AffectedStopType               `json:"affectedStops,omitempty"`
	AltEnd          *string                         `json:"altEnd,omitempty"`
	AltSection      *string                         `json:"altSection,omitempty"`
	AltStart        *string                         `json:"altStart,omitempty"`
	BaseType        *MessageBaseType                `json:"baseType,omitempty"`
	Category        *string                         `json:"category,omitempty"`
	Channel         *[]MessageChannelType           `json:"channel,omitempty"`
	Company         *string                         `json:"company,omitempty"`
	CustomText      *string                         `json:"customText,omitempty"`
	DailyDuration   *string                         `json:"dailyDuration,omitempty"`
	DailyStartingAt *string                         `json:"dailyStartingAt,omitempty"`
	EDate           *string                         `json:"eDate,omitempty"`
	ETime           *string                         `json:"eTime,omitempty"`
	Edge            *[]MessageEdgeType              `json:"edge,omitempty"`
	Event           *[]MessageEventType             `json:"event,omitempty"`
	ExtInfo         *ExternalMessageInformationType `json:"extInfo,omitempty"`
	ExternalId      *string                         `json:"externalId,omitempty"`
	Head            *string                         `json:"head,omitempty"`
	Icon            *string                         `json:"icon,omitempty"`
	Id              string                          `json:"id"`
	Lead            *string                         `json:"lead,omitempty"`
	Message         *[]Message                      `json:"message,omitempty"`
	MessageCategory *[]MessageCategoryType          `json:"messageCategory,omitempty"`
	MessageText     *[]MessageTextType              `json:"messageText,omitempty"`
	ModDate         *string                         `json:"modDate,omitempty"`
	ModTime         *string                         `json:"modTime,omitempty"`
	Priority        *int32                          `json:"priority,omitempty"`
	Products        *int32                          `json:"products,omitempty"`
	Region          *[]MessageRegionType            `json:"region,omitempty"`
	RouteIdxFrom    *int32                          `json:"routeIdxFrom,omitempty"`
	RouteIdxTo      *int32                          `json:"routeIdxTo,omitempty"`
	SDate           *string                         `json:"sDate,omitempty"`
	STime           *string                         `json:"sTime,omitempty"`
	Tags            *TagsType                       `json:"tags,omitempty"`
	Tckr            *string                         `json:"tckr,omitempty"`
	Text            *string                         `json:"text,omitempty"`
	TextInternal    *string                         `json:"textInternal,omitempty"`
	ValidFromStop   *StopType                       `json:"validFromStop,omitempty"`
	ValidToStop     *StopType                       `json:"validToStop,omitempty"`
	ValidityDays    *ServiceDays                    `json:"validityDays,omitempty"`
}

// MessageBaseType defines model for Message.BaseType.
type MessageBaseType string

// MessageCategoryType defines model for MessageCategoryType.
type MessageCategoryType struct {
	Id   int32   `json:"id"`
	Name *string `json:"name,omitempty"`
}

// MessageChannelType defines model for MessageChannelType.
type MessageChannelType struct {
	Name          *string        `json:"name,omitempty"`
	Url           *[]UrlLinkType `json:"url,omitempty"`
	ValidFromDate *string        `json:"validFromDate,omitempty"`
	ValidFromTime *string        `json:"validFromTime,omitempty"`
	ValidToDate   *string        `json:"validToDate,omitempty"`
	ValidToTime   *string        `json:"validToTime,omitempty"`
}

// MessageEdgeType defines model for MessageEdgeType.
type MessageEdgeType struct {
	Direction      *int32         `json:"direction,omitempty"`
	EStop          *StopType      `json:"eStop,omitempty"`
	Estop          *StopType      `json:"estop,omitempty"`
	IconCoordinate *Coordinate    `json:"iconCoordinate,omitempty"`
	MessageRef     *[]int32       `json:"messageRef,omitempty"`
	Polyline       *[]Polyline    `json:"polyline,omitempty"`
	PolylineGroup  *PolylineGroup `json:"polylineGroup,omitempty"`
	SStop          *StopType      `json:"sStop,omitempty"`
	Sstop          *StopType      `json:"sstop,omitempty"`
}

// MessageEventType defines model for MessageEventType.
type MessageEventType struct {
	Current    *bool     `json:"current,omitempty"`
	Direction  *int32    `json:"direction,omitempty"`
	EDate      *string   `json:"eDate,omitempty"`
	EStop      *StopType `json:"eStop,omitempty"`
	ETime      *string   `json:"eTime,omitempty"`
	Estop      *StopType `json:"estop,omitempty"`
	SDate      *string   `json:"sDate,omitempty"`
	SStop      *StopType `json:"sStop,omitempty"`
	STime      *string   `json:"sTime,omitempty"`
	SectionNum *[]string `json:"sectionNum,omitempty"`
	Sstop      *StopType `json:"sstop,omitempty"`
}

// MessageRegionType defines model for MessageRegionType.
type MessageRegionType struct {
	IconCoordinate *Coordinate    `json:"iconCoordinate,omitempty"`
	Id             *string        `json:"id,omitempty"`
	MessageRef     *[]int32       `json:"messageRef,omitempty"`
	Name           *string        `json:"name,omitempty"`
	Polyline       *[]Polyline    `json:"polyline,omitempty"`
	PolylineGroup  *PolylineGroup `json:"polylineGroup,omitempty"`
	Ring           *Ring          `json:"ring,omitempty"`
}

// MessageTextType defines model for MessageTextType.
type MessageTextType struct {
	Tag  []string `json:"tag"`
	Text []string `json:"text"`
}

// Messages defines model for Messages.
type Messages struct {
	Message []Message `json:"Message"`
}

// Name defines model for Name.
type Name struct {
	Product      *ProductType `json:"Product,omitempty"`
	AddName      *string      `json:"addName,omitempty"`
	Category     *string      `json:"category,omitempty"`
	Name         string       `json:"name"`
	Number       string       `json:"number"`
	RouteIdxFrom *int32       `json:"routeIdxFrom,omitempty"`
	RouteIdxTo   *int32       `json:"routeIdxTo,omitempty"`
}

// Names defines model for Names.
type Names struct {
	Name []Name `json:"Name"`
}

// Note defines model for Note.
type Note struct {
	Key           *string   `json:"key,omitempty"`
	Priority      *int32    `json:"priority,omitempty"`
	RouteIdxFrom  *int32    `json:"routeIdxFrom,omitempty"`
	RouteIdxTo    *int32    `json:"routeIdxTo,omitempty"`
	RtActivated   *bool     `json:"rtActivated,omitempty"`
	RtDeactivated *bool     `json:"rtDeactivated,omitempty"`
	TxtL          *string   `json:"txtL,omitempty"`
	TxtN          *string   `json:"txtN,omitempty"`
	TxtS          *string   `json:"txtS,omitempty"`
	Type          *NoteType `json:"type,omitempty"`
	Url           *string   `json:"url,omitempty"`
	Value         *string   `json:"value,omitempty"`
}

// NoteType defines model for Note.Type.
type NoteType string

// Notes defines model for Notes.
type Notes struct {
	Note []Note `json:"Note"`
}

// OccupancyType defines model for OccupancyType.
type OccupancyType struct {
	Name   *string `json:"name,omitempty"`
	Number *string `json:"number,omitempty"`
	Raw    *int32  `json:"raw,omitempty"`
	V      *int32  `json:"v,omitempty"`
}

// OperatorType defines model for OperatorType.
type OperatorType struct {
	AddName        *string   `json:"addName,omitempty"`
	Administration *[]string `json:"administration,omitempty"`
	Id             *string   `json:"id,omitempty"`
	Name           string    `json:"name"`
	NameL          *string   `json:"nameL,omitempty"`
	NameN          *string   `json:"nameN,omitempty"`
	NameS          *string   `json:"nameS,omitempty"`
}

// OriginDestType defines model for OriginDestType.
type OriginDestType struct {
	Notes                  *Notes                              `json:"Notes,omitempty"`
	Occupancy              *[]OccupancyType                    `json:"Occupancy,omitempty"`
	Additional             *bool                               `json:"additional,omitempty"`
	Alighting              *bool                               `json:"alighting,omitempty"`
	Alt                    *int32                              `json:"alt,omitempty"`
	AltId                  *[]string                           `json:"altId,omitempty"`
	Boarding               *bool                               `json:"boarding,omitempty"`
	Cancelled              *bool                               `json:"cancelled,omitempty"`
	CancelledArrival       *bool                               `json:"cancelledArrival,omitempty"`
	CancelledDeparture     *bool                               `json:"cancelledDeparture,omitempty"`
	Date                   string                              `json:"date"`
	Description            *string                             `json:"description,omitempty"`
	Entry                  *bool                               `json:"entry,omitempty"`
	ExtId                  *string                             `json:"extId,omitempty"`
	HasMainMast            *bool                               `json:"hasMainMast,omitempty"`
	Hide                   *bool                               `json:"hide,omitempty"`
	Id                     *string                             `json:"id,omitempty"`
	IsBorderStop           *bool                               `json:"isBorderStop,omitempty"`
	IsMainMast             *bool                               `json:"isMainMast,omitempty"`
	IsTurningPoint         *bool                               `json:"isTurningPoint,omitempty"`
	Lat                    *float32                            `json:"lat,omitempty"`
	Lon                    *float32                            `json:"lon,omitempty"`
	MainMast               *StopLocation                       `json:"mainMast,omitempty"`
	MainMastAlt            *int32                              `json:"mainMastAlt,omitempty"`
	MainMastAltId          *[]string                           `json:"mainMastAltId,omitempty"`
	MainMastExtId          *string                             `json:"mainMastExtId,omitempty"`
	MainMastId             *string                             `json:"mainMastId,omitempty"`
	MainMastLat            *float32                            `json:"mainMastLat,omitempty"`
	MainMastLon            *float32                            `json:"mainMastLon,omitempty"`
	Mcp                    *bool                               `json:"mcp,omitempty"`
	McpData                *[]KVType                           `json:"mcpData,omitempty"`
	MinimumChangeDuration  *string                             `json:"minimumChangeDuration,omitempty"`
	Name                   string                              `json:"name"`
	Platform               *PlatformType                       `json:"platform,omitempty"`
	PrognosisType          *OriginDestTypePrognosisType        `json:"prognosisType,omitempty"`
	PsCtxArriveEarlier     *string                             `json:"psCtxArriveEarlier,omitempty"`
	PsCtxDepartLater       *string                             `json:"psCtxDepartLater,omitempty"`
	RouteIdx               *int32                              `json:"routeIdx,omitempty"`
	RtAlighting            *bool                               `json:"rtAlighting,omitempty"`
	RtBoarding             *bool                               `json:"rtBoarding,omitempty"`
	RtCnclDataSourceType   *OriginDestTypeRtCnclDataSourceType `json:"rtCnclDataSourceType,omitempty"`
	RtDate                 *string                             `json:"rtDate,omitempty"`
	RtPlatform             *PlatformType                       `json:"rtPlatform,omitempty"`
	RtTime                 *string                             `json:"rtTime,omitempty"`
	RtTrack                *string                             `json:"rtTrack,omitempty"`
	RtTrackHidden          *bool                               `json:"rtTrackHidden,omitempty"`
	RtTz                   *int32                              `json:"rtTz,omitempty"`
	ScheduledTimeChanged   *bool                               `json:"scheduledTimeChanged,omitempty"`
	Time                   string                              `json:"time"`
	Track                  *string                             `json:"track,omitempty"`
	TrackHidden            *bool                               `json:"trackHidden,omitempty"`
	TrainCompositionMarker *int32                              `json:"trainCompositionMarker,omitempty"`
	Type                   string                              `json:"type"`
	Tz                     *int32                              `json:"tz,omitempty"`
	UncertainDelay         *bool                               `json:"uncertainDelay,omitempty"`
	WeatherInformation     *[]WeatherInformationType           `json:"weatherInformation,omitempty"`
}

// OriginDestTypePrognosisType defines model for OriginDestType.PrognosisType.
type OriginDestTypePrognosisType string

// OriginDestTypeRtCnclDataSourceType defines model for OriginDestType.RtCnclDataSourceType.
type OriginDestTypeRtCnclDataSourceType string

// ParallelJourneyRefType defines model for ParallelJourneyRefType.
type ParallelJourneyRefType struct {
	FromLocation     *StopType                       `json:"fromLocation,omitempty"`
	JourneyDetailRef *string                         `json:"journeyDetailRef,omitempty"`
	LinkType         *ParallelJourneyRefTypeLinkType `json:"linkType,omitempty"`
	ToLocation       *StopType                       `json:"toLocation,omitempty"`
	Type             *ParallelJourneyRefTypeType     `json:"type,omitempty"`
}

// ParallelJourneyRefTypeLinkType defines model for ParallelJourneyRefType.LinkType.
type ParallelJourneyRefTypeLinkType string

// ParallelJourneyRefTypeType defines model for ParallelJourneyRefType.Type.
type ParallelJourneyRefTypeType string

// PlatformType defines model for PlatformType.
type PlatformType struct {
	Alt    *int32            `json:"alt,omitempty"`
	AltId  *[]string         `json:"altId,omitempty"`
	Hidden *bool             `json:"hidden,omitempty"`
	Lat    *float32          `json:"lat,omitempty"`
	Lon    *float32          `json:"lon,omitempty"`
	Text   *string           `json:"text,omitempty"`
	Type   *PlatformTypeType `json:"type,omitempty"`
}

// PlatformTypeType defines model for PlatformType.Type.
type PlatformTypeType string

// Polyline defines model for Polyline.
type Polyline struct {
	Crd      *[]float64    `json:"crd,omitempty"`
	CrdEncS  *string       `json:"crdEncS,omitempty"`
	CrdEncYX *string       `json:"crdEncYX,omitempty"`
	CrdEncZ  *string       `json:"crdEncZ,omitempty"`
	Delta    bool          `json:"delta"`
	Dim      *int32        `json:"dim,omitempty"`
	Name     *string       `json:"name,omitempty"`
	Type     *PolylineType `json:"type,omitempty"`
}

// PolylineType defines model for Polyline.Type.
type PolylineType string

// PolylineDesc defines model for PolylineDesc.
type PolylineDesc struct {
	Crd      *[]float64 `json:"crd,omitempty"`
	CrdEncS  *string    `json:"crdEncS,omitempty"`
	CrdEncYX *string    `json:"crdEncYX,omitempty"`
	CrdEncZ  *string    `json:"crdEncZ,omitempty"`
	Delta    bool       `json:"delta"`
	Dim      *int32     `json:"dim,omitempty"`
	Name     *string    `json:"name,omitempty"`
}

// PolylineGroup defines model for PolylineGroup.
type PolylineGroup struct {
	CoordType    *PolylineGroupCoordType `json:"coordType,omitempty"`
	LayerName    *string                 `json:"layerName,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	PolylineDesc *[]PolylineDesc         `json:"polylineDesc,omitempty"`
}

// PolylineGroupCoordType defines model for PolylineGroup.CoordType.
type PolylineGroupCoordType string

// PricingType defines model for PricingType.
type PricingType struct {
	Any *map[string]interface{} `json:"any,omitempty"`
	Idx int32                   `json:"idx"`
}

// ProductStatusType defines model for ProductStatusType.
type ProductStatusType struct {
	Code   *int32    `json:"code,omitempty"`
	Icon   *IconType `json:"icon,omitempty"`
	RtIcon *IconType `json:"rtIcon,omitempty"`
	Txt    *string   `json:"txt,omitempty"`
}

// ProductType defines model for ProductType.
type ProductType struct {
	AddName       *string            `json:"addName,omitempty"`
	Admin         *string            `json:"admin,omitempty"`
	CatCode       *string            `json:"catCode,omitempty"`
	CatIn         *string            `json:"catIn,omitempty"`
	CatOut        *string            `json:"catOut,omitempty"`
	CatOutL       *string            `json:"catOutL,omitempty"`
	CatOutS       *string            `json:"catOutS,omitempty"`
	Cls           *string            `json:"cls,omitempty"`
	DisplayNumber *string            `json:"displayNumber,omitempty"`
	FromLocation  *StopType          `json:"fromLocation,omitempty"`
	Icon          *IconType          `json:"icon,omitempty"`
	InternalName  *string            `json:"internalName,omitempty"`
	Line          *string            `json:"line,omitempty"`
	LineId        *string            `json:"lineId,omitempty"`
	LocTraffic    *string            `json:"locTraffic,omitempty"`
	MatchId       *string            `json:"matchId,omitempty"`
	Name          *string            `json:"name,omitempty"`
	Num           *string            `json:"num,omitempty"`
	Operator      *string            `json:"operator,omitempty"`
	OperatorCode  *string            `json:"operatorCode,omitempty"`
	OperatorInfo  *OperatorType      `json:"operatorInfo,omitempty"`
	OutCtrl       *string            `json:"outCtrl,omitempty"`
	RouteIdxFrom  *int32             `json:"routeIdxFrom,omitempty"`
	RouteIdxTo    *int32             `json:"routeIdxTo,omitempty"`
	ShipTraffic   *string            `json:"shipTraffic,omitempty"`
	Status        *ProductStatusType `json:"status,omitempty"`
	Surcharge     *string            `json:"surcharge,omitempty"`
	TarGr         *string            `json:"tarGr,omitempty"`
	ToLocation    *StopType          `json:"toLocation,omitempty"`
}

// RGBAColorType defines model for RGBAColorType.
type RGBAColorType struct {
	A   *int32  `json:"a,omitempty"`
	B   *int32  `json:"b,omitempty"`
	G   *int32  `json:"g,omitempty"`
	Hex *string `json:"hex,omitempty"`
	R   *int32  `json:"r,omitempty"`
}

// ReferencedJourneyType defines model for ReferencedJourneyType.
type ReferencedJourneyType struct {
	Journey     *JourneyType              `json:"journey,omitempty"`
	OrigFromIdx *int32                    `json:"origFromIdx,omitempty"`
	OrigToIdx   *int32                    `json:"origToIdx,omitempty"`
	RefFromIdx  *int32                    `json:"refFromIdx,omitempty"`
	RefToIdx    *int32                    `json:"refToIdx,omitempty"`
	Type        ReferencedJourneyTypeType `json:"type"`
}

// ReferencedJourneyTypeType defines model for ReferencedJourneyType.Type.
type ReferencedJourneyTypeType string

// ResourceLinkType defines model for ResourceLinkType.
type ResourceLinkType struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// ResourceLinks defines model for ResourceLinks.
type ResourceLinks struct {
	Link *[]ResourceLinkType `json:"link,omitempty"`
}

// ResultStatusType defines model for ResultStatusType.
type ResultStatusType struct {
	TimeDiffCritical *bool `json:"timeDiffCritical,omitempty"`
}

// Ring defines model for Ring.
type Ring struct {
	Lat       float32 `json:"lat"`
	Lon       float32 `json:"lon"`
	MaxRadius *int32  `json:"maxRadius,omitempty"`
	MinRadius *int32  `json:"minRadius,omitempty"`
}

// ServiceDays defines model for ServiceDays.
type ServiceDays struct {
	PlanningPeriodBegin *string `json:"planningPeriodBegin,omitempty"`
	PlanningPeriodEnd   *string `json:"planningPeriodEnd,omitempty"`
	RouteIdxFrom        *int32  `json:"routeIdxFrom,omitempty"`
	RouteIdxTo          *int32  `json:"routeIdxTo,omitempty"`
	SDaysB              *string `json:"sDaysB,omitempty"`
	SDaysI              *string `json:"sDaysI,omitempty"`
	SDaysR              *string `json:"sDaysR,omitempty"`
}

// SortingGroupType defines model for SortingGroupType.
type SortingGroupType struct {
	Name   *string               `json:"name,omitempty"`
	TripId []string              `json:"tripId"`
	Type   *SortingGroupTypeType `json:"type,omitempty"`
}

// SortingGroupTypeType defines model for SortingGroupType.Type.
type SortingGroupTypeType string

// SortingType defines model for SortingType.
type SortingType struct {
	SortingGroup       *[]SortingGroupType            `json:"SortingGroup,omitempty"`
	InitialSortingType *SortingTypeInitialSortingType `json:"initialSortingType,omitempty"`
	Scrollable         *bool                          `json:"scrollable,omitempty"`
}

// SortingTypeInitialSortingType defines model for SortingType.InitialSortingType.
type SortingTypeInitialSortingType string

// SotContextType defines model for SotContextType.
type SotContextType struct {
	CalcDate                      *string               `json:"calcDate,omitempty"`
	CalcTime                      *string               `json:"calcTime,omitempty"`
	CurLoc                        *Location             `json:"curLoc,omitempty"`
	CurLocRouteIdx                *int32                `json:"curLocRouteIdx,omitempty"`
	JourneyId                     *string               `json:"journeyId,omitempty"`
	LegId                         *string               `json:"legId,omitempty"`
	LegIdFootPathConnection       *string               `json:"legIdFootPathConnection,omitempty"`
	LegIdx                        *int32                `json:"legIdx,omitempty"`
	LegIdxFootPathConnection      *int32                `json:"legIdxFootPathConnection,omitempty"`
	LocFootPathConnection         *Location             `json:"locFootPathConnection,omitempty"`
	LocMode                       SotContextTypeLocMode `json:"locMode"`
	LocRouteIdxFootPathConnection *int32                `json:"locRouteIdxFootPathConnection,omitempty"`
	PrevLoc                       *Location             `json:"prevLoc,omitempty"`
	PrevLocRouteIdx               *int32                `json:"prevLocRouteIdx,omitempty"`
	TrainName                     *string               `json:"trainName,omitempty"`
}

// SotContextTypeLocMode defines model for SotContextType.LocMode.
type SotContextTypeLocMode string

// StopLocation defines model for StopLocation.
type StopLocation struct {
	LocationNotes          *LocationNotes            `json:"LocationNotes,omitempty"`
	Message                *[]Message                `json:"Message,omitempty"`
	TariffResult           *TariffResult             `json:"TariffResult,omitempty"`
	Alt                    *int32                    `json:"alt,omitempty"`
	AltId                  *[]string                 `json:"altId,omitempty"`
	AssignedPois           *[]CoordLocation          `json:"assignedPois,omitempty"`
	DefName                *string                   `json:"defName,omitempty"`
	Description            *string                   `json:"description,omitempty"`
	Dist                   *int32                    `json:"dist,omitempty"`
	Entry                  *bool                     `json:"entry,omitempty"`
	EntryPointLocation     *[]StopLocation           `json:"entryPointLocation,omitempty"`
	EquivalentStopLocation *[]StopLocation           `json:"equivalentStopLocation,omitempty"`
	ExtId                  string                    `json:"extId"`
	HasMainMast            *bool                     `json:"hasMainMast,omitempty"`
	Id                     string                    `json:"id"`
	IsMainMast             *bool                     `json:"isMainMast,omitempty"`
	Lat                    *float32                  `json:"lat,omitempty"`
	Links                  *[]ResourceLinks          `json:"links,omitempty"`
	Lon                    *float32                  `json:"lon,omitempty"`
	MainMast               *StopLocation             `json:"mainMast,omitempty"`
	MainMastAlt            *int32                    `json:"mainMastAlt,omitempty"`
	MainMastAltId          *[]string                 `json:"mainMastAltId,omitempty"`
	MainMastExtId          *string                   `json:"mainMastExtId,omitempty"`
	MainMastId             *string                   `json:"mainMastId,omitempty"`
	MainMastLat            *float32                  `json:"mainMastLat,omitempty"`
	MainMastLon            *float32                  `json:"mainMastLon,omitempty"`
	MatchValue             *int32                    `json:"matchValue,omitempty"`
	Meta                   *bool                     `json:"meta,omitempty"`
	MinimumChangeDuration  *string                   `json:"minimumChangeDuration,omitempty"`
	Name                   string                    `json:"name"`
	ProductAtStop          *[]ProductType            `json:"productAtStop,omitempty"`
	Products               *int32                    `json:"products,omitempty"`
	Refinable              *bool                     `json:"refinable,omitempty"`
	TimezoneOffset         *int32                    `json:"timezoneOffset,omitempty"`
	Track                  *string                   `json:"track,omitempty"`
	TrackHidden            *bool                     `json:"trackHidden,omitempty"`
	WeatherInformation     *[]WeatherInformationType `json:"weatherInformation,omitempty"`
	Weight                 *int32                    `json:"weight,omitempty"`
}

// StopType defines model for StopType.
type StopType struct {
	Notes                   *Notes                        `json:"Notes,omitempty"`
	Occupancy               *[]OccupancyType              `json:"Occupancy,omitempty"`
	Additional              *bool                         `json:"additional,omitempty"`
	Alighting               *bool                         `json:"alighting,omitempty"`
	Alt                     *int32                        `json:"alt,omitempty"`
	AltId                   *[]string                     `json:"altId,omitempty"`
	ArrDate                 *string                       `json:"arrDate,omitempty"`
	ArrHide                 *bool                         `json:"arrHide,omitempty"`
	ArrPlatform             *PlatformType                 `json:"arrPlatform,omitempty"`
	ArrPrognosisType        *StopTypeArrPrognosisType     `json:"arrPrognosisType,omitempty"`
	ArrTime                 *string                       `json:"arrTime,omitempty"`
	ArrTrack                *string                       `json:"arrTrack,omitempty"`
	ArrTrackHidden          *bool                         `json:"arrTrackHidden,omitempty"`
	ArrTz                   *int32                        `json:"arrTz,omitempty"`
	ArrUncertainDelay       *bool                         `json:"arrUncertainDelay,omitempty"`
	Boarding                *bool                         `json:"boarding,omitempty"`
	Cancelled               *bool                         `json:"cancelled,omitempty"`
	CancelledArrival        *bool                         `json:"cancelledArrival,omitempty"`
	CancelledDeparture      *bool                         `json:"cancelledDeparture,omitempty"`
	DepDate                 *string                       `json:"depDate,omitempty"`
	DepDir                  *string                       `json:"depDir,omitempty"`
	DepHide                 *bool                         `json:"depHide,omitempty"`
	DepPlatform             *PlatformType                 `json:"depPlatform,omitempty"`
	DepPrognosisType        *StopTypeDepPrognosisType     `json:"depPrognosisType,omitempty"`
	DepTime                 *string                       `json:"depTime,omitempty"`
	DepTrack                *string                       `json:"depTrack,omitempty"`
	DepTrackHidden          *bool                         `json:"depTrackHidden,omitempty"`
	DepTz                   *int32                        `json:"depTz,omitempty"`
	DepUncertainDelay       *bool                         `json:"depUncertainDelay,omitempty"`
	Description             *string                       `json:"description,omitempty"`
	Entry                   *bool                         `json:"entry,omitempty"`
	ExtId                   string                        `json:"extId"`
	HasMainMast             *bool                         `json:"hasMainMast,omitempty"`
	Id                      string                        `json:"id"`
	IsBorderStop            *bool                         `json:"isBorderStop,omitempty"`
	IsMainMast              *bool                         `json:"isMainMast,omitempty"`
	IsTurningPoint          *bool                         `json:"isTurningPoint,omitempty"`
	Lat                     *float32                      `json:"lat,omitempty"`
	Lon                     *float32                      `json:"lon,omitempty"`
	MainMast                *StopLocation                 `json:"mainMast,omitempty"`
	MainMastAlt             *int32                        `json:"mainMastAlt,omitempty"`
	MainMastAltId           *[]string                     `json:"mainMastAltId,omitempty"`
	MainMastExtId           *string                       `json:"mainMastExtId,omitempty"`
	MainMastId              *string                       `json:"mainMastId,omitempty"`
	MainMastLat             *float32                      `json:"mainMastLat,omitempty"`
	MainMastLon             *float32                      `json:"mainMastLon,omitempty"`
	MinimumChangeDuration   *string                       `json:"minimumChangeDuration,omitempty"`
	Name                    string                        `json:"name"`
	PassingDate             *string                       `json:"passingDate,omitempty"`
	PassingTime             *string                       `json:"passingTime,omitempty"`
	PassingTz               *int32                        `json:"passingTz,omitempty"`
	RouteIdx                *int32                        `json:"routeIdx,omitempty"`
	RtAlighting             *bool                         `json:"rtAlighting,omitempty"`
	RtArrDate               *string                       `json:"rtArrDate,omitempty"`
	RtArrPlatform           *PlatformType                 `json:"rtArrPlatform,omitempty"`
	RtArrTime               *string                       `json:"rtArrTime,omitempty"`
	RtArrTrack              *string                       `json:"rtArrTrack,omitempty"`
	RtArrTrackHidden        *bool                         `json:"rtArrTrackHidden,omitempty"`
	RtArrTz                 *int32                        `json:"rtArrTz,omitempty"`
	RtBoarding              *bool                         `json:"rtBoarding,omitempty"`
	RtCnclDataSourceType    *StopTypeRtCnclDataSourceType `json:"rtCnclDataSourceType,omitempty"`
	RtDepDate               *string                       `json:"rtDepDate,omitempty"`
	RtDepPlatform           *PlatformType                 `json:"rtDepPlatform,omitempty"`
	RtDepTime               *string                       `json:"rtDepTime,omitempty"`
	RtDepTrack              *string                       `json:"rtDepTrack,omitempty"`
	RtDepTrackHidden        *bool                         `json:"rtDepTrackHidden,omitempty"`
	RtDepTz                 *int32                        `json:"rtDepTz,omitempty"`
	RtPassingDate           *string                       `json:"rtPassingDate,omitempty"`
	RtPassingTime           *string                       `json:"rtPassingTime,omitempty"`
	RtPassingTz             *int32                        `json:"rtPassingTz,omitempty"`
	ScheduledArrTimeChanged *bool                         `json:"scheduledArrTimeChanged,omitempty"`
	ScheduledDepTimeChanged *bool                         `json:"scheduledDepTimeChanged,omitempty"`
	WeatherInformation      *[]WeatherInformationType     `json:"weatherInformation,omitempty"`
}

// StopTypeArrPrognosisType defines model for StopType.ArrPrognosisType.
type StopTypeArrPrognosisType string

// StopTypeDepPrognosisType defines model for StopType.DepPrognosisType.
type StopTypeDepPrognosisType string

// StopTypeRtCnclDataSourceType defines model for StopType.RtCnclDataSourceType.
type StopTypeRtCnclDataSourceType string

// Stops defines model for Stops.
type Stops struct {
	Stop []StopType `json:"Stop"`
}

// TagsType defines model for TagsType.
type TagsType struct {
	Tag []string `json:"tag"`
}

// TariffResult defines model for TariffResult.
type TariffResult struct {
	Clickout        *string              `json:"clickout,omitempty"`
	ExternalContent *ExternalContentType `json:"externalContent,omitempty"`
	FareSetItem     *[]FareSetItem       `json:"fareSetItem,omitempty"`
	Param           *[]KVType            `json:"param,omitempty"`
}

// TechnicalMessage defines model for TechnicalMessage.
type TechnicalMessage struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// TechnicalMessages defines model for TechnicalMessages.
type TechnicalMessages struct {
	TechnicalMessage *[]TechnicalMessage `json:"TechnicalMessage,omitempty"`
}

// Ticket defines model for Ticket.
type Ticket struct {
	Cur             *string              `json:"cur,omitempty"`
	Desc            *string              `json:"desc,omitempty"`
	ExternalContent *ExternalContentType `json:"externalContent,omitempty"`
	FromLeg         *int32               `json:"fromLeg,omitempty"`
	FromLegId       *string              `json:"fromLegId,omitempty"`
	Name            *string              `json:"name,omitempty"`
	Param           *[]KVType            `json:"param,omitempty"`
	Price           *int32               `json:"price,omitempty"`
	ShpCtx          *string              `json:"shpCtx,omitempty"`
	ToLeg           *int32               `json:"toLeg,omitempty"`
	ToLegId         *string              `json:"toLegId,omitempty"`
}

// TrafficMessageType defines model for TrafficMessageType.
type TrafficMessageType struct {
	PolylineGroup *PolylineGroup          `json:"PolylineGroup,omitempty"`
	Desc          *string                 `json:"desc,omitempty"`
	ExtId         *string                 `json:"extId,omitempty"`
	Icon          *IconType               `json:"icon,omitempty"`
	Id            *string                 `json:"id,omitempty"`
	Location      *StopLocation           `json:"location,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Type          *TrafficMessageTypeType `json:"type,omitempty"`
}

// TrafficMessageTypeType defines model for TrafficMessageType.Type.
type TrafficMessageTypeType string

// TripList defines model for TripList.
type TripList struct {
	Pricing              *[]PricingType     `json:"Pricing,omitempty"`
	ResultStatus         *ResultStatusType  `json:"ResultStatus,omitempty"`
	Sorting              *SortingType       `json:"Sorting,omitempty"`
	SotContext           *SotContextType    `json:"SotContext,omitempty"`
	TechnicalMessages    *TechnicalMessages `json:"TechnicalMessages,omitempty"`
	Trip                 *[]TripType        `json:"Trip,omitempty"`
	Warnings             *Warnings          `json:"Warnings,omitempty"`
	DialectVersion       *string            `json:"dialectVersion,omitempty"`
	ErrorCode            *string            `json:"errorCode,omitempty"`
	ErrorText            *string            `json:"errorText,omitempty"`
	InternalErrorCode    *string            `json:"internalErrorCode,omitempty"`
	InternalErrorText    *string            `json:"internalErrorText,omitempty"`
	InternalErrorTextOut *string            `json:"internalErrorTextOut,omitempty"`
	PlanRtTs             *time.Time         `json:"planRtTs,omitempty"`
	RequestId            *string            `json:"requestId,omitempty"`
	ScrB                 *string            `json:"scrB,omitempty"`
	ScrF                 *string            `json:"scrF,omitempty"`
	ScrReturnB           *string            `json:"scrReturnB,omitempty"`
	ScrReturnF           *string            `json:"scrReturnF,omitempty"`
	ServerVersion        *string            `json:"serverVersion,omitempty"`
	Version              *string            `json:"version,omitempty"`
}

// TripStatusType defines model for TripStatusType.
type TripStatusType struct {
	Convenient                     *bool   `json:"convenient,omitempty"`
	Daily                          *bool   `json:"daily,omitempty"`
	Detour                         *bool   `json:"detour,omitempty"`
	Direct                         *bool   `json:"direct,omitempty"`
	Economic                       *bool   `json:"economic,omitempty"`
	Hint                           *string `json:"hint,omitempty"`
	HintCode                       *int32  `json:"hintCode,omitempty"`
	SlowDirect                     *bool   `json:"slowDirect,omitempty"`
	Specialtrain                   *bool   `json:"specialtrain,omitempty"`
	SubOptimalDirect               *bool   `json:"subOptimalDirect,omitempty"`
	TimeDiffCritical               *bool   `json:"timeDiffCritical,omitempty"`
	UkNationalRouteingGuideFailure *bool   `json:"ukNationalRouteingGuideFailure,omitempty"`
	Unsharp                        *bool   `json:"unsharp,omitempty"`
}

// TripType defines model for TripType.
type TripType struct {
	Destination           OriginDestType             `json:"Destination"`
	Eco                   *EcoType                   `json:"Eco,omitempty"`
	EcoCmp                *[]EcoType                 `json:"EcoCmp,omitempty"`
	Freq                  *FreqType                  `json:"Freq,omitempty"`
	LegList               LegList                    `json:"LegList"`
	Messages              *Messages                  `json:"Messages,omitempty"`
	Notes                 *Notes                     `json:"Notes,omitempty"`
	Occupancy             *[]OccupancyType           `json:"Occupancy,omitempty"`
	Origin                OriginDestType             `json:"Origin"`
	ServiceDays           *[]ServiceDays             `json:"ServiceDays,omitempty"`
	TariffResult          *TariffResult              `json:"TariffResult,omitempty"`
	TripStatus            *TripStatusType            `json:"TripStatus,omitempty"`
	Alternative           *bool                      `json:"alternative,omitempty"`
	CalBurned             *int32                     `json:"calBurned,omitempty"`
	Calculation           *TripTypeCalculation       `json:"calculation,omitempty"`
	Checksum              *string                    `json:"checksum,omitempty"`
	CombinedCount         *int32                     `json:"combinedCount,omitempty"`
	CombinedMinDuration   *string                    `json:"combinedMinDuration,omitempty"`
	CtxRecon              *string                    `json:"ctxRecon,omitempty"`
	Duration              *string                    `json:"duration,omitempty"`
	EcoUrl                *string                    `json:"ecoUrl,omitempty"`
	HasAlternative        *bool                      `json:"hasAlternative,omitempty"`
	HasDelayInfo          *bool                      `json:"hasDelayInfo,omitempty"`
	Idx                   *int32                     `json:"idx,omitempty"`
	IndividualChangeTimes *bool                      `json:"individualChangeTimes,omitempty"`
	Reliability           *ConnectionReliabilityType `json:"reliability,omitempty"`
	Return                *bool                      `json:"return,omitempty"`
	RtDuration            *string                    `json:"rtDuration,omitempty"`
	TransferCount         *int32                     `json:"transferCount,omitempty"`
	TripId                *string                    `json:"tripId,omitempty"`
	Valid                 *bool                      `json:"valid,omitempty"`
	Via                   *[]StopType                `json:"via,omitempty"`
}

// TripTypeCalculation defines model for TripType.Calculation.
type TripTypeCalculation string

// UrlLinkType defines model for UrlLinkType.
type UrlLinkType struct {
	Name *string `json:"name,omitempty"`
	Url  string  `json:"url"`
}

// Warning defines model for Warning.
type Warning struct {
	Key     *string `json:"key,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Warnings defines model for Warnings.
type Warnings struct {
	Warning *[]Warning `json:"Warning,omitempty"`
}

// WeatherInformationType defines model for WeatherInformationType.
type WeatherInformationType struct {
	Date    string                     `json:"date"`
	Icon    *IconType                  `json:"icon,omitempty"`
	Summary *string                    `json:"summary,omitempty"`
	Temp    *string                    `json:"temp,omitempty"`
	Text    *string                    `json:"text,omitempty"`
	Time    *string                    `json:"time,omitempty"`
	Type    WeatherInformationTypeType `json:"type"`
}

// WeatherInformationTypeType defines model for WeatherInformationType.Type.
type WeatherInformationTypeType string

// GetArrivalBoardParams defines parameters for GetArrivalBoard.
type GetArrivalBoardParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetArrivalBoardParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// Id Specifies the station/stop ID for which the arrivals shall be retrieved. Required if extId is not present. String not longer than 512.
	//
	// Since version: 1.0
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ExtId Deprecated. Please use `id` as it supports external IDs.
	//
	// Specifies the external station/stop ID for which the arrivals shall be retrieved. Required if id is not present. String not longer than 512.
	//
	// Since version: 1.21
	ExtId *string `form:"extId,omitempty" json:"extId,omitempty"`

	// Direction If only vehicles departing or arriving from a certain direction shall be returned, specify the direction by giving the station/stop ID of the last stop on the journey. String not longer than 512.
	//
	// Since version: 1.0
	Direction *string `form:"direction,omitempty" json:"direction,omitempty"`

	// Date Sets the start date for which the departures shall be retrieved. Represented in the format YYYY-MM-DD.
	//
	// Since version: 1.0
	Date *string `form:"date,omitempty" json:"date,omitempty"`

	// Time Sets the start time for which the departures shall be retrieved. Represented in the format hh:mm[:ss] in 24h nomenclature. Seconds will be ignored for requests.
	//
	// Since version: 1.0
	Time *string `form:"time,omitempty" json:"time,omitempty"`

	// Duration Set the interval size in minutes. Range: 0-1439
	//
	// Since version: 1.0
	Duration *int `form:"duration,omitempty" json:"duration,omitempty"`

	// MaxJourneys Maximum number of journeys to be returned. If no value is defined or -1, all departing/arriving services within the duration sized period are returned. Minimum of -1.
	//
	// Since version: 1.0
	MaxJourneys *int `form:"maxJourneys,omitempty" json:"maxJourneys,omitempty"`

	// Products Decimal value defining the product classes to be included in the search. It represents a bitmask combining bit number of a product as defined in the HAFAS raw data. Values are retrievable by <<service_datainfo,Data Information service>>. Minimum of 0.
	//
	// Since version: 1.12
	Products *int `form:"products,omitempty" json:"products,omitempty"`

	// Operators Only journeys provided by the given operators are part of the result. To filter multiple operators, separate the codes by comma.
	// If the operator should not be part of the journeys, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Operators *string `form:"operators,omitempty" json:"operators,omitempty"`

	// Categories Only journeys provided by the given categories are part of the result. To filter multiple categories, separate the codes by comma.
	// If the category should not be part of the journeys, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 2.25
	Categories *string `form:"categories,omitempty" json:"categories,omitempty"`

	// Lines Only journeys running the given line are part of the result. To filter multiple lines, separate the codes by comma. If the line should not be part of the be trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Lines *string `form:"lines,omitempty" json:"lines,omitempty"`

	// Attributes Filter boards by one or more attribute codes of a journey. Multiple attribute codes are separated by comma. If the attribute should not be part of the result, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty"`

	// Platforms Filter boards by platform. Multiple platforms are separated by comma. String not longer than 1024.
	//
	// Since version: 2.7.2
	Platforms *string `form:"platforms,omitempty" json:"platforms,omitempty"`

	// Passlist Include a list of all passed waystops?
	//
	// Since version: 1.0
	Passlist *GetArrivalBoardParamsPasslist `form:"passlist,omitempty" json:"passlist,omitempty"`

	// PasslistMaxStops Maximum number of stops including requested stop and last stop. Minimum of 0.
	//
	// Since version: 1.0
	PasslistMaxStops *int `form:"passlistMaxStops,omitempty" json:"passlistMaxStops,omitempty"`

	// MinDur Minimum duration a journey has left to be returned. Minimum of 0.
	//
	// Since version: 1.0
	MinDur *int `form:"minDur,omitempty" json:"minDur,omitempty"`

	// Baim Enables/disables BAIM information.
	//
	// Since version: 2.26
	Baim *GetArrivalBoardParamsBaim `form:"baim,omitempty" json:"baim,omitempty"`

	// RtMode Set the realtime mode to be used.
	//
	// Since version: 2.34
	RtMode *GetArrivalBoardParamsRtMode `form:"rtMode,omitempty" json:"rtMode,omitempty"`

	// Type Set the station arrival board type to be used.
	//
	// ARR: Arrival board as configured in HAFAS
	// ARR_EQUIVS: Arrival board with all journeys at any masts and equivalent stops
	// ARR_MAST: Arrival board at mast
	// ARR_STATION: Arrival board with all journeys at any masts of the requested station
	//
	// Since version: 2.12
	Type GetArrivalBoardParamsType `form:"type" json:"type"`
}

// GetArrivalBoardParamsFormat defines parameters for GetArrivalBoard.
type GetArrivalBoardParamsFormat string

// GetArrivalBoardParamsPasslist defines parameters for GetArrivalBoard.
type GetArrivalBoardParamsPasslist string

// GetArrivalBoardParamsBaim defines parameters for GetArrivalBoard.
type GetArrivalBoardParamsBaim string

// GetArrivalBoardParamsRtMode defines parameters for GetArrivalBoard.
type GetArrivalBoardParamsRtMode string

// GetArrivalBoardParamsType defines parameters for GetArrivalBoard.
type GetArrivalBoardParamsType string

// GetDepartureBoardParams defines parameters for GetDepartureBoard.
type GetDepartureBoardParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetDepartureBoardParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// Id Specifies the station/stop ID for which the departures shall be retrieved. Required if extId is not present. String not longer than 512.
	//
	// Since version: 1.0
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ExtId Deprecated. Please use `id` as it supports external IDs.
	//
	// Specifies the external station/stop ID for which the departures shall be retrieved. Required if id is not present. String not longer than 512.
	//
	// Since version: 1.21
	ExtId *string `form:"extId,omitempty" json:"extId,omitempty"`

	// Direction If only vehicles departing or arriving from a certain direction shall be returned, specify the direction by giving the station/stop ID of the last stop on the journey. String not longer than 512.
	//
	// Since version: 1.0
	Direction *string `form:"direction,omitempty" json:"direction,omitempty"`

	// Date Sets the start date for which the departures shall be retrieved. Represented in the format YYYY-MM-DD.
	//
	// Since version: 1.0
	Date *string `form:"date,omitempty" json:"date,omitempty"`

	// Time Sets the start time for which the departures shall be retrieved. Represented in the format hh:mm[:ss] in 24h nomenclature. Seconds will be ignored for requests.
	//
	// Since version: 1.0
	Time *string `form:"time,omitempty" json:"time,omitempty"`

	// Duration Set the interval size in minutes. Range: 0-1439
	//
	// Since version: 1.0
	Duration *int `form:"duration,omitempty" json:"duration,omitempty"`

	// MaxJourneys Maximum number of journeys to be returned. If no value is defined or -1, all departing/arriving services within the duration sized period are returned. Minimum of -1.
	//
	// Since version: 1.0
	MaxJourneys *int `form:"maxJourneys,omitempty" json:"maxJourneys,omitempty"`

	// Products Decimal value defining the product classes to be included in the search. It represents a bitmask combining bit number of a product as defined in the HAFAS raw data. Values are retrievable by <<service_datainfo,Data Information service>>. Minimum of 0.
	//
	// Since version: 1.12
	Products *int `form:"products,omitempty" json:"products,omitempty"`

	// Operators Only journeys provided by the given operators are part of the result. To filter multiple operators, separate the codes by comma.
	// If the operator should not be part of the journeys, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Operators *string `form:"operators,omitempty" json:"operators,omitempty"`

	// Categories Only journeys provided by the given categories are part of the result. To filter multiple categories, separate the codes by comma.
	// If the category should not be part of the journeys, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 2.25
	Categories *string `form:"categories,omitempty" json:"categories,omitempty"`

	// Lines Only journeys running the given line are part of the result. To filter multiple lines, separate the codes by comma. If the line should not be part of the be trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Lines *string `form:"lines,omitempty" json:"lines,omitempty"`

	// Attributes Filter boards by one or more attribute codes of a journey. Multiple attribute codes are separated by comma. If the attribute should not be part of the result, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty"`

	// Platforms Filter boards by platform. Multiple platforms are separated by comma. String not longer than 1024.
	//
	// Since version: 2.7.2
	Platforms *string `form:"platforms,omitempty" json:"platforms,omitempty"`

	// Passlist Include a list of all passed waystops?
	//
	// Since version: 1.0
	Passlist *GetDepartureBoardParamsPasslist `form:"passlist,omitempty" json:"passlist,omitempty"`

	// PasslistMaxStops Maximum number of stops including requested stop and last stop. Minimum of 0.
	//
	// Since version: 1.0
	PasslistMaxStops *int `form:"passlistMaxStops,omitempty" json:"passlistMaxStops,omitempty"`

	// MinDur Minimum duration a journey has left to be returned. Minimum of 0.
	//
	// Since version: 1.0
	MinDur *int `form:"minDur,omitempty" json:"minDur,omitempty"`

	// Baim Enables/disables BAIM information.
	//
	// Since version: 2.26
	Baim *GetDepartureBoardParamsBaim `form:"baim,omitempty" json:"baim,omitempty"`

	// RtMode Set the realtime mode to be used.
	//
	// Since version: 2.34
	RtMode *GetDepartureBoardParamsRtMode `form:"rtMode,omitempty" json:"rtMode,omitempty"`

	// Type Set the station departure board type to be used.
	//
	// DEP: Departure board as configured in HAFAS
	// DEP_EQUIVS: Departure board with all journeys at any masts and equivalent stops
	// DEP_MAST: Departure board at mast
	// DEP_STATION: Departure board with all journeys at any masts of the requested station
	//
	// Since version: 2.12
	Type GetDepartureBoardParamsType `form:"type" json:"type"`
}

// GetDepartureBoardParamsFormat defines parameters for GetDepartureBoard.
type GetDepartureBoardParamsFormat string

// GetDepartureBoardParamsPasslist defines parameters for GetDepartureBoard.
type GetDepartureBoardParamsPasslist string

// GetDepartureBoardParamsBaim defines parameters for GetDepartureBoard.
type GetDepartureBoardParamsBaim string

// GetDepartureBoardParamsRtMode defines parameters for GetDepartureBoard.
type GetDepartureBoardParamsRtMode string

// GetDepartureBoardParamsType defines parameters for GetDepartureBoard.
type GetDepartureBoardParamsType string

// GetGisrouteParams defines parameters for GetGisroute.
type GetGisrouteParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetGisrouteParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// Ctx Specifies the GIS route context. String not longer than 8096.
	//
	// Since version: 1.0
	Ctx string `form:"ctx" json:"ctx"`

	// Poly Enables/disables the calculation of the polyline.
	//
	// Since version: 1.11
	Poly *GetGisrouteParamsPoly `form:"poly,omitempty" json:"poly,omitempty"`

	// PolyEnc Defines encoding of the returned polyline. Possible values are N (no encoding / compression), DLT (delta to the previous coordinate), GPA (Google encoded polyline format) defaults to N. Not all option might be available in your installation.
	//
	// Since version: 1.11
	PolyEnc *GetGisrouteParamsPolyEnc `form:"polyEnc,omitempty" json:"polyEnc,omitempty"`

	// Eco Enables/disables eco value calculation.
	//
	// Since version: 1.23.9
	Eco *GetGisrouteParamsEco `form:"eco,omitempty" json:"eco,omitempty"`

	// Baim Enables/disables BAIM.
	//
	// Since version: 2.39
	Baim *GetGisrouteParamsBaim `form:"baim,omitempty" json:"baim,omitempty"`
}

// GetGisrouteParamsFormat defines parameters for GetGisroute.
type GetGisrouteParamsFormat string

// GetGisrouteParamsPoly defines parameters for GetGisroute.
type GetGisrouteParamsPoly string

// GetGisrouteParamsPolyEnc defines parameters for GetGisroute.
type GetGisrouteParamsPolyEnc string

// GetGisrouteParamsEco defines parameters for GetGisroute.
type GetGisrouteParamsEco string

// GetGisrouteParamsBaim defines parameters for GetGisroute.
type GetGisrouteParamsBaim string

// GetHimsearchParams defines parameters for GetHimsearch.
type GetHimsearchParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetHimsearchParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// DateB Sets the event period start date.
	//
	// Since version: 1.0
	DateB *string `form:"dateB,omitempty" json:"dateB,omitempty"`

	// DateE Sets the event period end date.
	//
	// Since version: 1.0
	DateE *string `form:"dateE,omitempty" json:"dateE,omitempty"`

	// TimeB Sets the event period start time.
	//
	// Since version: 1.0
	TimeB *string `form:"timeB,omitempty" json:"timeB,omitempty"`

	// TimeE Sets the event period end time.
	//
	// Since version: 1.0
	TimeE *string `form:"timeE,omitempty" json:"timeE,omitempty"`

	// Weekdays Bitmask for validity of HIM messages based on weekdays. Each character represents a weekday starting on monday.
	//
	// Since version: 2.4
	Weekdays *string `form:"weekdays,omitempty" json:"weekdays,omitempty"`

	// HimIds List of HIM message IDs seperated by comma. String not longer than 1024.
	//
	// Since version: 1.0
	HimIds *string `form:"himIds,omitempty" json:"himIds,omitempty"`

	// HierarchicalView Return parent messages with childs.
	//
	// Since version: 2.8.1
	HierarchicalView *GetHimsearchParamsHierarchicalView `form:"hierarchicalView,omitempty" json:"hierarchicalView,omitempty"`

	// Operators List of operators seperated by comma. String not longer than 1024.
	//
	// Since version: 1.0
	Operators *string `form:"operators,omitempty" json:"operators,omitempty"`

	// Categories List of train categories seperated by comma. String not longer than 1024.
	//
	// Since version: 1.0
	Categories *string `form:"categories,omitempty" json:"categories,omitempty"`

	// Channels List of channels seperated by comma. String not longer than 1024.
	//
	// Since version: 1.0
	Channels *string `form:"channels,omitempty" json:"channels,omitempty"`

	// Companies List of companies seperated by comma. String not longer than 1024.
	//
	// Since version: 1.0
	Companies *string `form:"companies,omitempty" json:"companies,omitempty"`

	// Lines Only HIM messages for the given line are part of the result. To filter multiple lines, separate the codes by comma. String not longer than 1024.
	//
	// Since version: 2.4
	Lines *string `form:"lines,omitempty" json:"lines,omitempty"`

	// Lineids Only HIM messages for the given line (identified by its line ID) are part of the result. To filter multiple lines, separate the line IDs by comma. String not longer than 1024.
	//
	// Since version: 2.11
	Lineids *string `form:"lineids,omitempty" json:"lineids,omitempty"`

	// Stations List of (external) station ids to be filtered for seperated by comma. String not longer than 1024.
	//
	// Since version: 2.4
	Stations *string `form:"stations,omitempty" json:"stations,omitempty"`

	// Fromstation Filter messages by line segment starting at this station given as (external) station id. String not longer than 512.
	//
	// Since version: 2.4
	Fromstation *string `form:"fromstation,omitempty" json:"fromstation,omitempty"`

	// Tostation Filter messages by line segment travelling in direction of this station given as (external) station id. String not longer than 512.
	//
	// Since version: 2.4
	Tostation *string `form:"tostation,omitempty" json:"tostation,omitempty"`

	// Bothways If enabled, messages in both directions - from 'fromstation' to 'tostation' as well as from 'tostation' to 'fromstation' are returned
	//
	// Since version: 2.4
	Bothways *GetHimsearchParamsBothways `form:"bothways,omitempty" json:"bothways,omitempty"`

	// Trainnames List of train name to be filtered for seperated by comma. String not longer than 1024.
	//
	// Since version: 2.4
	Trainnames *string `form:"trainnames,omitempty" json:"trainnames,omitempty"`

	// Metas List of predefined filters seperated by comma. String not longer than 512.
	//
	// Since version: 2.4
	Metas *string `form:"metas,omitempty" json:"metas,omitempty"`

	// Himcategory HIM category, e.g. Works and/or Disturbance. Value depends on your HAFAS server data. String not longer than 512.
	//
	// Since version: 1.23.9
	Himcategory *string `form:"himcategory,omitempty" json:"himcategory,omitempty"`

	// Himtags HIM Tags. Value depends on your HAFAS server data. String not longer than 1024.
	//
	// Since version: 2.10
	Himtags *string `form:"himtags,omitempty" json:"himtags,omitempty"`

	// Regions Filter for HIM messages based on regions defined in HAFAS raw data. Seperated by comma. Available regions can be retrieved by /datainfo service. String not longer than 1024.
	//
	// Since version: 2.16
	Regions *string `form:"regions,omitempty" json:"regions,omitempty"`

	// Himtext Filter for HIM messages containing the given free text message seperated by comma. String not longer than 1024.
	//
	// Since version: 2.4
	Himtext *string `form:"himtext,omitempty" json:"himtext,omitempty"`

	// Himtexttags Return HIM texts having this text tag(s) only. Multiple values are separated by comma. Note: HIM text tags differ from HIM tags. String not longer than 1024.
	//
	// Since version: 2.16
	Himtexttags *string `form:"himtexttags,omitempty" json:"himtexttags,omitempty"`

	// Exthimtext Extended filter based on tags and and corresponding localized text fragments. String not longer than 1024.
	//
	// Since version: 2.4
	Exthimtext *string `form:"exthimtext,omitempty" json:"exthimtext,omitempty"`

	// Additionalfields List of additional fields and values to be filtered for. String not longer than 1024.
	//
	// Since version: 2.22
	Additionalfields *string `form:"additionalfields,omitempty" json:"additionalfields,omitempty"`

	// ExtInfo Filter for HIM messages based on external ids and id sources. Different items are seperated by comma. Value seperated by pipe symbol. To negate put ! in front of the item. String not longer than 8096.
	//
	// Since version: 2.38
	ExtInfo *string `form:"extInfo,omitempty" json:"extInfo,omitempty"`

	// Poly Enables/disables returning of geo information for affected edges and regions if available and enabled in the backend.
	//
	// Since version: 1.23.12
	Poly *GetHimsearchParamsPoly `form:"poly,omitempty" json:"poly,omitempty"`

	// Searchmode HIM search mode.
	//
	// Since version: 1.0
	Searchmode *GetHimsearchParamsSearchmode `form:"searchmode,omitempty" json:"searchmode,omitempty"`

	// AffectedJourneyMode Define how to return affected journeys
	//
	// Since version: 2.5
	AffectedJourneyMode *GetHimsearchParamsAffectedJourneyMode `form:"affectedJourneyMode,omitempty" json:"affectedJourneyMode,omitempty"`

	// AffectedJourneyStopMode Define how to return stops of affected journeys
	//
	// Since version: 2.5
	AffectedJourneyStopMode *GetHimsearchParamsAffectedJourneyStopMode `form:"affectedJourneyStopMode,omitempty" json:"affectedJourneyStopMode,omitempty"`

	// OrderBy Define the Order the returned messages by fields and directions. Multiple, comma separated entries are supported Range: EVT_BEG_ASC,EVT_BEG_DESC,EVT_END_ASC,EVT_END_DESC,HID_ASC,HID_DESC,LMOD_ASC,LMOD_DESC,PRIO_ASC,PRIO_DESC
	//
	// Since version: 2.4.1
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Minprio Filter for HIM messages having at least this priority. Minimum of 0.
	//
	// Since version: 2.4
	Minprio *int `form:"minprio,omitempty" json:"minprio,omitempty"`

	// Maxprio Filter for HIM messages having this priority as maximum. Minimum of 0.
	//
	// Since version: 2.4
	Maxprio *int `form:"maxprio,omitempty" json:"maxprio,omitempty"`

	// LlLat Lower left latitude of bounding box.
	//
	// Since version: 2.24.0
	LlLat *float32 `form:"llLat,omitempty" json:"llLat,omitempty"`

	// LlLon Lower left longitude of bounding box.
	//
	// Since version: 2.24.0
	LlLon *float32 `form:"llLon,omitempty" json:"llLon,omitempty"`

	// UrLat Upper right latitude of bounding box.
	//
	// Since version: 2.24.0
	UrLat *float32 `form:"urLat,omitempty" json:"urLat,omitempty"`

	// UrLon Upper right longitude of bounding box.
	//
	// Since version: 2.24.0
	UrLon *float32 `form:"urLon,omitempty" json:"urLon,omitempty"`
}

// GetHimsearchParamsFormat defines parameters for GetHimsearch.
type GetHimsearchParamsFormat string

// GetHimsearchParamsHierarchicalView defines parameters for GetHimsearch.
type GetHimsearchParamsHierarchicalView string

// GetHimsearchParamsBothways defines parameters for GetHimsearch.
type GetHimsearchParamsBothways string

// GetHimsearchParamsPoly defines parameters for GetHimsearch.
type GetHimsearchParamsPoly string

// GetHimsearchParamsSearchmode defines parameters for GetHimsearch.
type GetHimsearchParamsSearchmode string

// GetHimsearchParamsAffectedJourneyMode defines parameters for GetHimsearch.
type GetHimsearchParamsAffectedJourneyMode string

// GetHimsearchParamsAffectedJourneyStopMode defines parameters for GetHimsearch.
type GetHimsearchParamsAffectedJourneyStopMode string

// GetJourneyDetailParams defines parameters for GetJourneyDetail.
type GetJourneyDetailParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetJourneyDetailParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// Id Specifies the internal journey id of the journey shall be retrieved. Maximum length 512. String not longer than 512.
	//
	// Since version: 1.0
	Id string `form:"id" json:"id"`

	// Date Day of operation
	//
	// Since version: 1.0
	Date *string `form:"date,omitempty" json:"date,omitempty"`

	// Poly Enables/disables the calculation of the polyline for each leg of the trip except any GIS route.
	//
	// Since version: 1.11
	Poly *GetJourneyDetailParamsPoly `form:"poly,omitempty" json:"poly,omitempty"`

	// PolyEnc Defines encoding of the returned polyline. Possible values are N (no encoding / compression), DLT (delta to the previous coordinate), GPA (Google encoded polyline format) defaults to N. Not all option might be available in your installation.
	//
	// Since version: 1.11
	PolyEnc *GetJourneyDetailParamsPolyEnc `form:"polyEnc,omitempty" json:"polyEnc,omitempty"`

	// ShowPassingPoints Enables/disables the return of stops having no alighting and no boarding in its passlist for each leg of the trip.
	//
	// Since version: 1.0
	ShowPassingPoints *GetJourneyDetailParamsShowPassingPoints `form:"showPassingPoints,omitempty" json:"showPassingPoints,omitempty"`

	// RtMode Set the realtime mode to be used.
	//
	// Since version: 1.0
	RtMode *GetJourneyDetailParamsRtMode `form:"rtMode,omitempty" json:"rtMode,omitempty"`

	// FromId Specifies the station/stop ID the partial itinerary shall start from. String not longer than 512.
	//
	// Since version: 2.3
	FromId *string `form:"fromId,omitempty" json:"fromId,omitempty"`

	// FromIdx Specifies the station/stop index the partial itinerary shall start from. Minimum of 0.
	//
	// Since version: 2.3
	FromIdx *int `form:"fromIdx,omitempty" json:"fromIdx,omitempty"`

	// ToId Specifies the station/stop ID the partial itinerary shall end at. String not longer than 512.
	//
	// Since version: 2.3
	ToId *string `form:"toId,omitempty" json:"toId,omitempty"`

	// ToIdx Specifies the station/stop index the partial itinerary shall end at. Minimum of 0.
	//
	// Since version: 2.3
	ToIdx *int `form:"toIdx,omitempty" json:"toIdx,omitempty"`

	// Baim Enables/disables BAIM search and response.
	//
	// Since version: 2.7.3
	Baim *GetJourneyDetailParamsBaim `form:"baim,omitempty" json:"baim,omitempty"`
}

// GetJourneyDetailParamsFormat defines parameters for GetJourneyDetail.
type GetJourneyDetailParamsFormat string

// GetJourneyDetailParamsPoly defines parameters for GetJourneyDetail.
type GetJourneyDetailParamsPoly string

// GetJourneyDetailParamsPolyEnc defines parameters for GetJourneyDetail.
type GetJourneyDetailParamsPolyEnc string

// GetJourneyDetailParamsShowPassingPoints defines parameters for GetJourneyDetail.
type GetJourneyDetailParamsShowPassingPoints string

// GetJourneyDetailParamsRtMode defines parameters for GetJourneyDetail.
type GetJourneyDetailParamsRtMode string

// GetJourneyDetailParamsBaim defines parameters for GetJourneyDetail.
type GetJourneyDetailParamsBaim string

// GetJourneyposParams defines parameters for GetJourneypos.
type GetJourneyposParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetJourneyposParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// LlLat Lower left latitude of bounding box.
	//
	// Since version: 1.0
	LlLat float32 `form:"llLat" json:"llLat"`

	// LlLon Lower left longitude of bounding box.
	//
	// Since version: 1.0
	LlLon float32 `form:"llLon" json:"llLon"`

	// UrLat Upper right latitude of bounding box.
	//
	// Since version: 1.0
	UrLat float32 `form:"urLat" json:"urLat"`

	// UrLon Upper right longitude of bounding box.
	//
	// Since version: 1.0
	UrLon float32 `form:"urLon" json:"urLon"`

	// Operators Filter for operators. To filter multiple operators, separate the codes by comma. String not longer than 8096.
	//
	// Since version: 1.0
	Operators *string `form:"operators,omitempty" json:"operators,omitempty"`

	// Products Decimal value defining the product classes to be included in the search. It represents a bitmask combining bit number of a product as defined in the HAFAS raw data. Values are retrievable by <<service_datainfo,Data Information service>>. Minimum of 0.
	//
	// Since version: 1.0
	Products *int `form:"products,omitempty" json:"products,omitempty"`

	// Attributes Filter trips by one or more attribute codes of a journey. Multiple attribute codes are separated by comma. If the attribute should not be part of the be trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty"`

	// Jid Filter journeys by one or more journey id. Multiple journey ids are separated by comma. String not longer than 1024.
	//
	// Since version: 1.0
	Jid *string `form:"jid,omitempty" json:"jid,omitempty"`

	// Lines Only journeys running the given line are part of the result. To filter multiple lines, separate the codes by comma. String not longer than 1024.
	//
	// Since version: 1.0
	Lines *string `form:"lines,omitempty" json:"lines,omitempty"`

	// Infotexts Filter journeys by one or more custom infotext filters. Multiple infotexts are separated by comma. If the infotext should not be part of the be trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Infotexts *string `form:"infotexts,omitempty" json:"infotexts,omitempty"`

	// MaxJny Maximum number of journeys in response. Minimum of 0. Range: 1-1000
	//
	// Since version: 1.0
	MaxJny *int `form:"maxJny,omitempty" json:"maxJny,omitempty"`

	// PeriodSize Size of interval journey positions should be retrieved in milliseonds. Minimum of 0.
	//
	// Since version: 2.24
	PeriodSize *int `form:"periodSize,omitempty" json:"periodSize,omitempty"`

	// PeriodStep Size of interval steps. Minimum of 0.
	//
	// Since version: 2.24
	PeriodStep *int `form:"periodStep,omitempty" json:"periodStep,omitempty"`

	// Date Day of operation.
	//
	// Since version: 1.0
	Date *string `form:"date,omitempty" json:"date,omitempty"`

	// Time Time the service operates according to scheduled data. If not provided, the whole day is taken into account.
	//
	// Since version: 1.0
	Time *string `form:"time,omitempty" json:"time,omitempty"`

	// PositionMode Mode the used for position calculation. REPORT_ONLY: Only get back reported positions; CALC_REPORT: Use reported position if available, calculate if not; CALC: Calculate all positions; Default REPORT_ONLY
	//
	// Since version: 1.0
	PositionMode *GetJourneyposParamsPositionMode `form:"positionMode,omitempty" json:"positionMode,omitempty"`
}

// GetJourneyposParamsFormat defines parameters for GetJourneypos.
type GetJourneyposParamsFormat string

// GetJourneyposParamsPositionMode defines parameters for GetJourneypos.
type GetJourneyposParamsPositionMode string

// GetLocationNameParams defines parameters for GetLocationName.
type GetLocationNameParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetLocationNameParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// Input Search for that token. String not longer than 512.
	//
	// Since version: 1.0
	Input string `form:"input" json:"input"`

	// MaxNo Maximum number of returned stops. Range: 1-1000
	//
	// Since version: 1.0
	MaxNo *int `form:"maxNo,omitempty" json:"maxNo,omitempty"`

	// Type Type filter for location types.
	//
	// Since version: 1.20
	Type *GetLocationNameParamsType `form:"type,omitempty" json:"type,omitempty"`

	// LocationSelectionMode Selection mode for locations.
	//
	// Since version: 1.20
	LocationSelectionMode *GetLocationNameParamsLocationSelectionMode `form:"locationSelectionMode,omitempty" json:"locationSelectionMode,omitempty"`

	// WithEquivalentLocations Return equivalent locations.
	//
	// Since version: 2.33
	WithEquivalentLocations *GetLocationNameParamsWithEquivalentLocations `form:"withEquivalentLocations,omitempty" json:"withEquivalentLocations,omitempty"`

	// RestrictSelection Restrict allowed stations.
	//
	// Since version: 2.31
	RestrictSelection *GetLocationNameParamsRestrictSelection `form:"restrictSelection,omitempty" json:"restrictSelection,omitempty"`

	// Products Decimal value defining the product classes to be included in the search. It represents a bitmask combining bit number of a product as defined in the HAFAS raw data. Values are retrievable by <<service_datainfo,Data Information service>>. Minimum of 0.
	//
	// Since version: 1.15
	Products *int `form:"products,omitempty" json:"products,omitempty"`

	// WithProducts Return locations with products.
	//
	// Since version: 2.28
	WithProducts *GetLocationNameParamsWithProducts `form:"withProducts,omitempty" json:"withProducts,omitempty"`

	// ProductRepresentatives If activated, only one representative of a location product per category is returned.
	//
	// Since version: 2.28
	ProductRepresentatives *GetLocationNameParamsProductRepresentatives `form:"productRepresentatives,omitempty" json:"productRepresentatives,omitempty"`

	// CoordLat Latitude of centre coordinate.
	//
	// Since version: 1.20
	CoordLat *float32 `form:"coordLat,omitempty" json:"coordLat,omitempty"`

	// CoordLong Longitude of centre coordinate.
	//
	// Since version: 1.20
	CoordLong *float32 `form:"coordLong,omitempty" json:"coordLong,omitempty"`

	// R Search radius in meter around the given coordinate if any. Minimum of 1.
	//
	// Since version: 1.20
	R *int `form:"r,omitempty" json:"r,omitempty"`

	// RefineId In case of an refinable location, this value takes the ID of the refinable one of a previous result. String not longer than 512.
	//
	// Since version: 1.0
	RefineId *string `form:"refineId,omitempty" json:"refineId,omitempty"`

	// Meta Filter by a predefined meta filter. If the rules of the predefined filter should not be negated, put ! in front of it. Multiple values are separated by comma if definded for POI filtering. String not longer than 512.
	//
	// Since version: 1.0
	Meta *string `form:"meta,omitempty" json:"meta,omitempty"`

	// Stations Filter for stations. Matches if the given value is prefix of any station ID. Multiple values are separated by comma. String not longer than 4096.
	//
	// Since version: 1.0
	Stations *string `form:"stations,omitempty" json:"stations,omitempty"`

	// Sattributes Filter locations by one or more attribute codes. Multiple attribute codes are separated by comma. If the attribute should not be part of the be location data, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Sattributes *string `form:"sattributes,omitempty" json:"sattributes,omitempty"`

	// Sinfotexts Filter locations by one or more station infotext codes and values. Parameter structure is code|value. Multiple attribute codes are separated by comma. String not longer than 1024.
	//
	// Since version: 2.24
	Sinfotexts *string `form:"sinfotexts,omitempty" json:"sinfotexts,omitempty"`

	// FilterMode Filter modes for nearby searches.
	//
	// Since version: 2.7
	FilterMode *GetLocationNameParamsFilterMode `form:"filterMode,omitempty" json:"filterMode,omitempty"`

	// PoolId Filter locations by pool id (also known as Pool UIC code). Multiple values are separated by comma. To negate put ! in front of the value. String not longer than 8096.
	//
	// Since version: 2.26
	PoolId *string `form:"poolId,omitempty" json:"poolId,omitempty"`
}

// GetLocationNameParamsFormat defines parameters for GetLocationName.
type GetLocationNameParamsFormat string

// GetLocationNameParamsType defines parameters for GetLocationName.
type GetLocationNameParamsType string

// GetLocationNameParamsLocationSelectionMode defines parameters for GetLocationName.
type GetLocationNameParamsLocationSelectionMode string

// GetLocationNameParamsWithEquivalentLocations defines parameters for GetLocationName.
type GetLocationNameParamsWithEquivalentLocations string

// GetLocationNameParamsRestrictSelection defines parameters for GetLocationName.
type GetLocationNameParamsRestrictSelection string

// GetLocationNameParamsWithProducts defines parameters for GetLocationName.
type GetLocationNameParamsWithProducts string

// GetLocationNameParamsProductRepresentatives defines parameters for GetLocationName.
type GetLocationNameParamsProductRepresentatives string

// GetLocationNameParamsFilterMode defines parameters for GetLocationName.
type GetLocationNameParamsFilterMode string

// GetLocationNearbystopsParams defines parameters for GetLocationNearbystops.
type GetLocationNearbystopsParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetLocationNearbystopsParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// OriginCoordLat Latitude of centre coordinate.
	//
	// Since version: 1.0
	OriginCoordLat float32 `form:"originCoordLat" json:"originCoordLat"`

	// OriginCoordLong Longitude of centre coordinate.
	//
	// Since version: 1.0
	OriginCoordLong float32 `form:"originCoordLong" json:"originCoordLong"`

	// R Search radius in meter around the given coordinate. Minimum of 1.
	//
	// Since version: 1.0
	R *int `form:"r,omitempty" json:"r,omitempty"`

	// MaxNo Maximum number of returned stops. Minimum of 0. Range: 1-1000
	//
	// Since version: 1.0
	MaxNo *int `form:"maxNo,omitempty" json:"maxNo,omitempty"`

	// Type Type filter for location types.
	//
	// Since version: 1.0
	Type *GetLocationNearbystopsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// LocationSelectionMode Selection mode for locations.
	//
	// Since version: 1.20
	LocationSelectionMode *GetLocationNearbystopsParamsLocationSelectionMode `form:"locationSelectionMode,omitempty" json:"locationSelectionMode,omitempty"`

	// Products Decimal value defining the product classes to be included in the search. It represents a bitmask combining bit number of a product as defined in the HAFAS raw data. Values are retrievable by <<service_datainfo,Data Information service>>. Minimum of 0.
	//
	// Since version: 1.15
	Products *int `form:"products,omitempty" json:"products,omitempty"`

	// Meta Filter by a predefined meta filter. If the rules of the predefined filter should not be negated, put ! in front of it. Multiple values are separated by comma if definded for POI filtering. String not longer than 512.
	//
	// Since version: 1.0
	Meta *string `form:"meta,omitempty" json:"meta,omitempty"`

	// Sattributes Filter locations by one or more attribute codes. Multiple attribute codes are separated by comma. If the attribute should not be part of the be location data, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Sattributes *string `form:"sattributes,omitempty" json:"sattributes,omitempty"`

	// Sinfotexts Filter locations by one or more station infotext codes and values. Multiple attribute codes are separated by comma the value by pipe |. String not longer than 1024.
	//
	// Since version: 1.0
	Sinfotexts *string `form:"sinfotexts,omitempty" json:"sinfotexts,omitempty"`

	// PoolId Filter locations by pool id (also known as Pool UIC code). Multiple values are separated by comma. To negate put ! in front of the value. String not longer than 8096.
	//
	// Since version: 2.26
	PoolId *string `form:"poolId,omitempty" json:"poolId,omitempty"`

	// Date Incorporate date. Represented in the format YYYY-MM-DD.
	//
	// Since version: 2.39
	Date *string `form:"date,omitempty" json:"date,omitempty"`

	// Time Incorporate time. Represented in the format hh:mm[:ss] in 24h nomenclature. Seconds will be ignored for requests.
	//
	// Since version: 2.39
	Time *string `form:"time,omitempty" json:"time,omitempty"`

	// Zoom Retrieve stops most relevant to this map zoom level. Range: 0-21
	//
	// Since version: 2.39
	Zoom *int `form:"zoom,omitempty" json:"zoom,omitempty"`

	// PoiCategories Filter locations by POI types. Multiple attribute codes are separated by comma. If the attribute should not be part of the be location data, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 2.42
	PoiCategories *string `form:"poiCategories,omitempty" json:"poiCategories,omitempty"`
}

// GetLocationNearbystopsParamsFormat defines parameters for GetLocationNearbystops.
type GetLocationNearbystopsParamsFormat string

// GetLocationNearbystopsParamsType defines parameters for GetLocationNearbystops.
type GetLocationNearbystopsParamsType string

// GetLocationNearbystopsParamsLocationSelectionMode defines parameters for GetLocationNearbystops.
type GetLocationNearbystopsParamsLocationSelectionMode string

// GetReconParams defines parameters for GetRecon.
type GetReconParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetReconParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// Ctx Specifies the reconstruction context. String not longer than 32768.
	//
	// Since version: 1.12
	Ctx string `form:"ctx" json:"ctx"`

	// Poly Enables/disables the calculation of the polyline for each leg of the trip except any GIS route.
	//
	// Since version: 1.12
	Poly *GetReconParamsPoly `form:"poly,omitempty" json:"poly,omitempty"`

	// PolyEnc Defines encoding of the returned polyline. Possible values are N (no encoding / compression), DLT (delta to the previous coordinate), GPA (Google encoded polyline format) defaults to N. Not all option might be available in your installation.
	//
	// Since version: 1.12
	PolyEnc *GetReconParamsPolyEnc `form:"polyEnc,omitempty" json:"polyEnc,omitempty"`

	// Date Sets the start date for which the departures shall be retrieved. Represented in the format YYYY-MM-DD.
	//
	// Since version: 1.12
	Date *string `form:"date,omitempty" json:"date,omitempty"`

	// UseCombinedComparison Compare based on combined output name - false: Compare parameters (category, line, train number) individually
	UseCombinedComparison *GetReconParamsUseCombinedComparison `form:"useCombinedComparison,omitempty" json:"useCombinedComparison,omitempty"`

	// AcceptGaps Accept an incomplete description of the connection (with gaps) i.e. missing walks/transfers
	//
	// Since version: 2.6.2
	AcceptGaps *GetReconParamsAcceptGaps `form:"acceptGaps,omitempty" json:"acceptGaps,omitempty"`

	// AllowDummySections Allow a partial reconstruction that will not lead to a reconstruction failure if sections are not reconstructable. Instead, for theses inconstructable sections, dummy sections will be created in the result.
	//
	// Since version: 2.11.0
	AllowDummySections *GetReconParamsAllowDummySections `form:"allowDummySections,omitempty" json:"allowDummySections,omitempty"`

	// FlagAllNonReachable Should all non-reachable journeys be flagged (true), or only the first one encountered?
	//
	// Since version: 2.6.2
	FlagAllNonReachable *GetReconParamsFlagAllNonReachable `form:"flagAllNonReachable,omitempty" json:"flagAllNonReachable,omitempty"`

	// MatchCatStrict Should the category (Gattung) match exactly? Only applicable if useCombinedComparison is false
	//
	// Since version: 2.6.2
	MatchCatStrict *GetReconParamsMatchCatStrict `form:"matchCatStrict,omitempty" json:"matchCatStrict,omitempty"`

	// MatchIdNonBlank Should the train identifier (Zugbezeichner) without whitespace match?
	//
	// Since version: 2.6.2
	MatchIdNonBlank *GetReconParamsMatchIdNonBlank `form:"matchIdNonBlank,omitempty" json:"matchIdNonBlank,omitempty"`

	// MatchIdStrict Should the train identifier (Zugbezeichner) match exactly?
	//
	// Since version: 2.6.2
	MatchIdStrict *GetReconParamsMatchIdStrict `form:"matchIdStrict,omitempty" json:"matchIdStrict,omitempty"`

	// MatchNumStrict Should the train number (Zugnummer) match exactly? Only applicable if useCombinedComparison is false
	//
	// Since version: 2.6.2
	MatchNumStrict *GetReconParamsMatchNumStrict `form:"matchNumStrict,omitempty" json:"matchNumStrict,omitempty"`

	// MatchRtType Should the realtime type that journeys are based on (e.g. SOLL, IST, additional, deviation, ...) be considered?
	//
	// Since version: 2.6.2
	MatchRtType *GetReconParamsMatchRtType `form:"matchRtType,omitempty" json:"matchRtType,omitempty"`

	// EnableRtFullSearch By default, the reconstruction request makes one attempt for each journey within the scheduled data. However, the scheduled data may not necessarily reflect basic realtime properties of the journeys therein. In such a case, one may enable a two-step approach which we call "full search", i.e. search for matching journeys in the scheduled data in a first step. If this fails, then search for matching journeys in the realtime data.
	//
	// Since version: 2.15
	EnableRtFullSearch *GetReconParamsEnableRtFullSearch `form:"enableRtFullSearch,omitempty" json:"enableRtFullSearch,omitempty"`

	// EnableReplacements If set to true replaces cancelled journeys with their replacement journeys if possible.
	//
	// Since version: 2.21.0
	EnableReplacements *GetReconParamsEnableReplacements `form:"enableReplacements,omitempty" json:"enableReplacements,omitempty"`

	// ArrL Lower deviation in minutes within interval [0, 720] indicating "how much earlier than original arrival" Range: 0-720
	//
	// Since version: 2.6.2
	ArrL *int `form:"arrL,omitempty" json:"arrL,omitempty"`

	// ArrU Upper deviation in minutes within interval [0, 720] indicating "how much later than original arrival" Range: 0-720
	//
	// Since version: 2.6.2
	ArrU *int `form:"arrU,omitempty" json:"arrU,omitempty"`

	// DepL Lower deviation in minutes within interval [0, 720] indicating "how much earlier than original departure" Range: 0-720
	//
	// Since version: 2.6.2
	DepL *int `form:"depL,omitempty" json:"depL,omitempty"`

	// DepU Upper deviation in minutes within interval [0, 720] indicating "how much later than original departure" Range: 0-720
	//
	// Since version: 2.6.2
	DepU *int `form:"depU,omitempty" json:"depU,omitempty"`

	// Passlist Enables/disables the return of the passlist for each leg of the trip.
	//
	// Since version: 1.12
	Passlist *GetReconParamsPasslist `form:"passlist,omitempty" json:"passlist,omitempty"`

	// ShowPassingPoints Enables/disables the return of stops having no alighting and boarding in its passlist for each leg of the trip. Needs passlist parameter enabled.
	//
	// Since version: 1.12
	ShowPassingPoints *GetReconParamsShowPassingPoints `form:"showPassingPoints,omitempty" json:"showPassingPoints,omitempty"`

	// RtMode Set the realtime mode to be used.
	//
	// Since version: 2.10.0
	RtMode *GetReconParamsRtMode `form:"rtMode,omitempty" json:"rtMode,omitempty"`

	// Baim Enables/disables BAIM.
	//
	// Since version: 2.39
	Baim *GetReconParamsBaim `form:"baim,omitempty" json:"baim,omitempty"`

	// Eco Only supported if legacy environmental calculator is used.
	//
	// Deprecated. Enables/disables eco value calculation.
	//
	// Since version: 1.23.9
	Eco *GetReconParamsEco `form:"eco,omitempty" json:"eco,omitempty"`

	// EcoCmp Only supported if legacy environmental calculator is used.
	//
	// Deprecated. Enables/disables eco comparison.
	//
	// Since version: 1.23.9
	EcoCmp *GetReconParamsEcoCmp `form:"ecoCmp,omitempty" json:"ecoCmp,omitempty"`

	// EcoParams Provide additional eco parameters. Values vary. String not longer than 1024.
	//
	// Since version: 1.23.9
	EcoParams *string `form:"ecoParams,omitempty" json:"ecoParams,omitempty"`

	// Tariff Enables/disables the output of tariff data. The default is configurable via provisioning.
	//
	// Since version: 2.7
	Tariff *GetReconParamsTariff `form:"tariff,omitempty" json:"tariff,omitempty"`

	// TrafficMessages Enables/disables the output of traffic messages. The default is configurable via provisioning.
	//
	// Since version: 2.7
	TrafficMessages *GetReconParamsTrafficMessages `form:"trafficMessages,omitempty" json:"trafficMessages,omitempty"`

	// TravellerProfileData Traveller profile data. Structure depends on set up. String not longer than 32768.
	//
	// Since version: 2.15
	TravellerProfileData *string `form:"travellerProfileData,omitempty" json:"travellerProfileData,omitempty"`

	// WithJourneyBoundaryPoints Enables/disables the return of journey boundary stops at public transport legs.
	//
	// Since version: 2.24
	WithJourneyBoundaryPoints *GetReconParamsWithJourneyBoundaryPoints `form:"withJourneyBoundaryPoints,omitempty" json:"withJourneyBoundaryPoints,omitempty"`

	// Freq Sets the frequency interval length for the search of journey alternatives in minutes. Using a value of 0 results in the suppression of the search for alternatives. Minimum of 0.
	//
	// Since version: 2.35
	Freq *int `form:"freq,omitempty" json:"freq,omitempty"`
}

// GetReconParamsFormat defines parameters for GetRecon.
type GetReconParamsFormat string

// GetReconParamsPoly defines parameters for GetRecon.
type GetReconParamsPoly string

// GetReconParamsPolyEnc defines parameters for GetRecon.
type GetReconParamsPolyEnc string

// GetReconParamsUseCombinedComparison defines parameters for GetRecon.
type GetReconParamsUseCombinedComparison string

// GetReconParamsAcceptGaps defines parameters for GetRecon.
type GetReconParamsAcceptGaps string

// GetReconParamsAllowDummySections defines parameters for GetRecon.
type GetReconParamsAllowDummySections string

// GetReconParamsFlagAllNonReachable defines parameters for GetRecon.
type GetReconParamsFlagAllNonReachable string

// GetReconParamsMatchCatStrict defines parameters for GetRecon.
type GetReconParamsMatchCatStrict string

// GetReconParamsMatchIdNonBlank defines parameters for GetRecon.
type GetReconParamsMatchIdNonBlank string

// GetReconParamsMatchIdStrict defines parameters for GetRecon.
type GetReconParamsMatchIdStrict string

// GetReconParamsMatchNumStrict defines parameters for GetRecon.
type GetReconParamsMatchNumStrict string

// GetReconParamsMatchRtType defines parameters for GetRecon.
type GetReconParamsMatchRtType string

// GetReconParamsEnableRtFullSearch defines parameters for GetRecon.
type GetReconParamsEnableRtFullSearch string

// GetReconParamsEnableReplacements defines parameters for GetRecon.
type GetReconParamsEnableReplacements string

// GetReconParamsPasslist defines parameters for GetRecon.
type GetReconParamsPasslist string

// GetReconParamsShowPassingPoints defines parameters for GetRecon.
type GetReconParamsShowPassingPoints string

// GetReconParamsRtMode defines parameters for GetRecon.
type GetReconParamsRtMode string

// GetReconParamsBaim defines parameters for GetRecon.
type GetReconParamsBaim string

// GetReconParamsEco defines parameters for GetRecon.
type GetReconParamsEco string

// GetReconParamsEcoCmp defines parameters for GetRecon.
type GetReconParamsEcoCmp string

// GetReconParamsTariff defines parameters for GetRecon.
type GetReconParamsTariff string

// GetReconParamsTrafficMessages defines parameters for GetRecon.
type GetReconParamsTrafficMessages string

// GetReconParamsWithJourneyBoundaryPoints defines parameters for GetRecon.
type GetReconParamsWithJourneyBoundaryPoints string

// GetSystemInfoParams defines parameters for GetSystemInfo.
type GetSystemInfoParams struct {
	Type GetSystemInfoParamsType `form:"type" json:"type"`
}

// GetSystemInfoParamsType defines parameters for GetSystemInfo.
type GetSystemInfoParamsType string

// GetTripParams defines parameters for GetTrip.
type GetTripParams struct {
	// RequestId Request ID for identifying the request. String not longer than 2048.
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Format Requested response format. If not set, the Accept-Header is used. If both are missing application/xml is used
	Format *GetTripParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// JsonpCallback Requests the JSON response data is wrapped into a JavaScript function with that name. String not longer than 1024.
	JsonpCallback *string `form:"jsonpCallback,omitempty" json:"jsonpCallback,omitempty"`

	// Lang The language of the journey planer. String not longer than 5.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// OriginId Specifies the station/stop ID of the origin for the trip.
	// Such ID can be retrieved from the location.name or location.nearbystops services. String not longer than 512.
	//
	// Since version: 1.0
	OriginId *string `form:"originId,omitempty" json:"originId,omitempty"`

	// OriginExtId Deprecated. Please use `originId` as it supports external IDs.
	//
	// Specifies the external station/stop ID of the origin for the trip.
	// Such ID can be retrieved from the location.name or location.nearbystops services. String not longer than 512.
	//
	// Since version: 1.20
	OriginExtId *string `form:"originExtId,omitempty" json:"originExtId,omitempty"`

	// OriginCoordLat Latitude of station/stop coordinate of the trip’s origin. The coordinate can be retrieved from the location.name or location.nearbystops services.
	//
	// Since version: 1.0
	OriginCoordLat *float32 `form:"originCoordLat,omitempty" json:"originCoordLat,omitempty"`

	// OriginCoordLong Longitude of station/stop coordinate of the trip’s origin. The coordinate can be retrieved from the location.name or location.nearbystops services.
	//
	// Since version: 1.0
	OriginCoordLong *float32 `form:"originCoordLong,omitempty" json:"originCoordLong,omitempty"`

	// OriginCoordName Name of the trip's origin if coordinate cannot be resolved to an address or poi. String not longer than 512.
	//
	// Since version: 2.13
	OriginCoordName *string `form:"originCoordName,omitempty" json:"originCoordName,omitempty"`

	// OriginCoordType Type of the trip's origin if coordinate cannot be resolved to an address or poi.
	//
	// Since version: 2.30
	OriginCoordType *GetTripParamsOriginCoordType `form:"originCoordType,omitempty" json:"originCoordType,omitempty"`

	// DestId Specifies the station/stop ID of the destination for the trip.
	// Such ID can be retrieved from the location.name or location.nearbystops services. String not longer than 512.
	//
	// Since version: 1.0
	DestId *string `form:"destId,omitempty" json:"destId,omitempty"`

	// DestExtId Deprecated. Please use `destId` as it supports external IDs.
	//
	// Specifies the external station/stop ID of the destination for the trip.
	// Such ID can be retrieved from the location.name or location.nearbystops services. String not longer than 512.
	//
	// Since version: 1.20
	DestExtId *string `form:"destExtId,omitempty" json:"destExtId,omitempty"`

	// DestCoordLat Latitude of station/stop coordinate of the trip’s destination. The coordinate can be retrieved from the location.name or location.nearbystops services.
	//
	// Since version: 1.0
	DestCoordLat *float32 `form:"destCoordLat,omitempty" json:"destCoordLat,omitempty"`

	// DestCoordLong Longitude of station/stop coordinate of the trip’s destination. The coordinate can be retrieved from the location.name or location.nearbystops services.
	//
	// Since version: 1.0
	DestCoordLong *float32 `form:"destCoordLong,omitempty" json:"destCoordLong,omitempty"`

	// DestCoordName Name of the trip's destination if coordinate cannot be resolved to an address or poi. String not longer than 512.
	//
	// Since version: 2.13
	DestCoordName *string `form:"destCoordName,omitempty" json:"destCoordName,omitempty"`

	// DestCoordType Type of the trip's destination if coordinate cannot be resolved to an address or poi.
	//
	// Since version: 2.30
	DestCoordType *GetTripParamsDestCoordType `form:"destCoordType,omitempty" json:"destCoordType,omitempty"`

	// Via Complex structure to provide multiple via points separated by semicolon. String not longer than 8096.
	//
	// Since version: 1.0
	Via *string `form:"via,omitempty" json:"via,omitempty"`

	// ViaId ID of a station/stop used as a via for the trip. Specifying a via station forces the trip search to look for trips which must pass through this station.
	// Such IDs can be retrieved from the location.name or location.nearbystops services. String not longer than 512.
	//
	// Since version: 1.0
	ViaId *string `form:"viaId,omitempty" json:"viaId,omitempty"`

	// ViaWaitTime Defines the waiting time spent at via station in minutes. Minimum of 0.
	//
	// Since version: 1.0
	ViaWaitTime *int `form:"viaWaitTime,omitempty" json:"viaWaitTime,omitempty"`

	// Avoid Complex structure to provide multiple points to be avoided separated by semicolon. String not longer than 8096.
	//
	// Since version: 1.0
	Avoid *string `form:"avoid,omitempty" json:"avoid,omitempty"`

	// AvoidId ID of a station/stop to be avoided as transfer stop for the trip.
	// Such IDs can be retrieved from the location.name or location.nearbystops services. String not longer than 512.
	//
	// Since version: 1.22.2
	AvoidId *string `form:"avoidId,omitempty" json:"avoidId,omitempty"`

	// ViaGis Complex structure to provide multiple GIS via locations separated by semicolon. String not longer than 8096.
	//
	// Since version: 2.14
	ViaGis *string `form:"viaGis,omitempty" json:"viaGis,omitempty"`

	// ChangeTimePercent Configures the walking speed when changing from one leg of the journey to the next one. It extends the time required for changes by a specified percentage.
	// A value of 200 doubles the change time as initially calculated by the system. Minimum of 0.
	//
	// Since version: 1.0
	ChangeTimePercent *int `form:"changeTimePercent,omitempty" json:"changeTimePercent,omitempty"`

	// MinChangeTime Minimum change time at stop in minutes. Minimum of 0.
	//
	// Since version: 1.0
	MinChangeTime *int `form:"minChangeTime,omitempty" json:"minChangeTime,omitempty"`

	// MaxChangeTime Maximum change time at stop in minutes. Minimum of 0.
	//
	// Since version: 1.20
	MaxChangeTime *int `form:"maxChangeTime,omitempty" json:"maxChangeTime,omitempty"`

	// AddChangeTime This amount of minutes is added to the change time at each stop. Minimum of 0.
	//
	// Since version: 1.0
	AddChangeTime *int `form:"addChangeTime,omitempty" json:"addChangeTime,omitempty"`

	// MaxChange Maximum number of changes. Range: 0-11
	//
	// Since version: 1.0
	MaxChange *int `form:"maxChange,omitempty" json:"maxChange,omitempty"`

	// Date Sets the start date for which the departures shall be retrieved. Represented in the format YYYY-MM-DD.
	//
	// Since version: 1.0
	Date *string `form:"date,omitempty" json:"date,omitempty"`

	// Time Sets the start time for which the departures shall be retrieved. Represented in the format hh:mm[:ss] in 24h nomenclature. Seconds will be ignored for requests.
	//
	// Since version: 1.0
	Time *string `form:"time,omitempty" json:"time,omitempty"`

	// SearchForArrival If set, the date and time parameters specify the arrival time for the trip search instead of the departure time.
	//
	// Since version: 1.0
	SearchForArrival *GetTripParamsSearchForArrival `form:"searchForArrival,omitempty" json:"searchForArrival,omitempty"`

	// NumF Minimum number of trips after or before the search time, depending on search direction. Sum of numF and numB has to be less or equal 6. The maximum value depends on the actual configuration.
	//
	// Please see the section below about the search algorithm for more details. Range: 1-6
	//
	// Since version: 1.10
	NumF *int `form:"numF,omitempty" json:"numF,omitempty"`

	// NumB Minimum number of trips before or after the search time, depending on search direction. Sum of numF and numB has to be less or equal 6. The maximum value depends on the actual configuration.
	//
	// Please see the section below about the search algorithm for more details. Range: 0-5
	//
	// Since version: 1.10
	NumB *int `form:"numB,omitempty" json:"numB,omitempty"`

	// Context Defines the starting point for the scroll back or forth operation. Use the scrB value from a previous result to scroll backwards in time and use the scrF value to scroll forth. String not longer than 8096.
	//
	// Since version: 1.0
	Context *string `form:"context,omitempty" json:"context,omitempty"`

	// Poly Enables/disables the calculation of the polyline for each leg of the trip except any GIS route.
	//
	// Since version: 1.11
	Poly *GetTripParamsPoly `form:"poly,omitempty" json:"poly,omitempty"`

	// PolyEnc Defines encoding of the returned polyline. Possible values are N (no encoding / compression), DLT (delta to the previous coordinate), GPA (Google encoded polyline format) defaults to N. Not all option might be available in your installation.
	//
	// Since version: 1.11
	PolyEnc *GetTripParamsPolyEnc `form:"polyEnc,omitempty" json:"polyEnc,omitempty"`

	// Passlist Enables/disables the return of the passlist for each leg of the trip.
	//
	// Since version: 1.20
	Passlist *GetTripParamsPasslist `form:"passlist,omitempty" json:"passlist,omitempty"`

	// Products Decimal value defining the product classes to be included in the search. It represents a bitmask combining bit number of a product as defined in the HAFAS raw data. Values are retrievable by <<service_datainfo,Data Information service>>. Minimum of 0.
	//
	// Since version: 1.0
	Products *int `form:"products,omitempty" json:"products,omitempty"`

	// Operators Only trips provided by the given operators are part of the result. To filter multiple operators, separate the codes by comma.
	// If the operator should not be part of the trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.12
	Operators *string `form:"operators,omitempty" json:"operators,omitempty"`

	// Categories Only trips provided by the given categories are part of the result. To filter multiple categories, separate the codes by comma.
	// If the category should not be part of the trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 2.25
	Categories *string `form:"categories,omitempty" json:"categories,omitempty"`

	// CategoryFlags Only trips matching the given category flags are part of the result. To filter multiple category flags, separate the codes by comma. String not longer than 1024.
	//
	// Since version: 2.35
	CategoryFlags *string `form:"categoryFlags,omitempty" json:"categoryFlags,omitempty"`

	// Attributes Filter trips by one or more attribute codes of a journey. Multiple attribute codes are separated by comma. If the attribute should not be part of the be trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty"`

	// Sattributes Filter trips by one or more station attribute codes of a journey. Multiple attribute codes are separated by comma. If the attribute should not be part of the be trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.23.7
	Sattributes *string `form:"sattributes,omitempty" json:"sattributes,omitempty"`

	// Fattributes Filter trips by one or more footway attribute codes of a journey. Multiple attribute codes are separated by comma. If the attribute should not be part of the be trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 2.7
	Fattributes *string `form:"fattributes,omitempty" json:"fattributes,omitempty"`

	// Lines Only journeys running the given line are part of the result. To filter multiple lines, separate the codes by comma. If the line should not be part of the be trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Lines *string `form:"lines,omitempty" json:"lines,omitempty"`

	// Lineids Only journeys running the given line (identified by its line ID) are part of the result. To filter multiple lines, separate the line IDs by comma. If the line should not be part of the be trip, negate it by putting ! in front of it. String not longer than 1024.
	//
	// Since version: 1.0
	Lineids *string `form:"lineids,omitempty" json:"lineids,omitempty"`

	// AvoidPaths Only path not having the given properties will be part of the result. String not longer than 512.
	//
	// Since version: 1.12
	AvoidPaths *string `form:"avoidPaths,omitempty" json:"avoidPaths,omitempty"`

	// OriginWalk Enables/disables using footpaths in the beginning of a trip when searching from an address. String not longer than 1024.
	//
	// Since version: 1.0
	OriginWalk *string `form:"originWalk,omitempty" json:"originWalk,omitempty"`

	// OriginBike Enables/disables using bike routes in the beginning of a trip when searching from an address. String not longer than 1024.
	//
	// Since version: 1.0
	OriginBike *string `form:"originBike,omitempty" json:"originBike,omitempty"`

	// OriginCar Enables/disables using car in the beginning of a trip when searching from an address. String not longer than 1024.
	//
	// Since version: 1.0
	OriginCar *string `form:"originCar,omitempty" json:"originCar,omitempty"`

	// OriginTaxi Enables/disables using taxi rides in the beginning of a trip when searching from an address. String not longer than 1024.
	//
	// Since version: 1.0
	OriginTaxi *string `form:"originTaxi,omitempty" json:"originTaxi,omitempty"`

	// OriginPark Enables/disables using Park and Ride in the beginning of a trip when searching from an address String not longer than 1024.
	//
	// Since version: 1.0
	OriginPark *string `form:"originPark,omitempty" json:"originPark,omitempty"`

	// OriginMeta Enables using one or more predefined individual transport meta profile at the beginning of a trip. The profiles are defined in the HAFAS installation. String not longer than 512.
	//
	// Since version: 1.23.25
	OriginMeta *string `form:"originMeta,omitempty" json:"originMeta,omitempty"`

	// DestWalk Enables/disables using footpaths at the end of a trip when searching to an address. String not longer than 1024.
	//
	// Since version: 1.0
	DestWalk *string `form:"destWalk,omitempty" json:"destWalk,omitempty"`

	// DestBike Enables/disables using bike routes at the end of a trip when searching to an address. String not longer than 1024.
	//
	// Since version: 1.0
	DestBike *string `form:"destBike,omitempty" json:"destBike,omitempty"`

	// DestCar Enables/disables using car routes at the end of a trip when searching to an address. String not longer than 1024.
	//
	// Since version: 1.0
	DestCar *string `form:"destCar,omitempty" json:"destCar,omitempty"`

	// DestTaxi Enables/disables using taxi rides at the end of a trip when searching to an address. String not longer than 1024.
	//
	// Since version: 1.0
	DestTaxi *string `form:"destTaxi,omitempty" json:"destTaxi,omitempty"`

	// DestPark Enables/disables using Park and Ride at the end of a trip when searching to an address. String not longer than 1024.
	//
	// Since version: 1.0
	DestPark *string `form:"destPark,omitempty" json:"destPark,omitempty"`

	// DestMeta Enables using one or more predefined individual transport meta profile at the end of a trip. The profiles are defined in the HAFAS installation. String not longer than 512.
	//
	// Since version: 1.23.25
	DestMeta *string `form:"destMeta,omitempty" json:"destMeta,omitempty"`

	// TotalWalk Enables/disables using footpaths for the whole trip. String not longer than 1024.
	//
	// Since version: 1.23.20
	TotalWalk *string `form:"totalWalk,omitempty" json:"totalWalk,omitempty"`

	// TotalBike Enables/disables using bike routes for the whole trip. String not longer than 1024.
	//
	// Since version: 1.23.20
	TotalBike *string `form:"totalBike,omitempty" json:"totalBike,omitempty"`

	// TotalCar Enables/disables using car routes for the whole trip. String not longer than 1024.
	//
	// Since version: 1.23.20
	TotalCar *string `form:"totalCar,omitempty" json:"totalCar,omitempty"`

	// TotalTaxi Enables/disables using taxi rides for the whole trip. String not longer than 1024.
	//
	// Since version: 1.23.20
	TotalTaxi *string `form:"totalTaxi,omitempty" json:"totalTaxi,omitempty"`

	// TotalMeta Enables using one or more predefined individual transport meta profile for a trip. The profiles are defined in the HAFAS installation. String not longer than 512.
	//
	// Since version: 1.23.25
	TotalMeta *string `form:"totalMeta,omitempty" json:"totalMeta,omitempty"`

	// GisProducts Filter on GIS product, e.g. specific sharing provider. Currently, only exclusion of certain providers is available by adding ! in front of the provider meta code. Available codes are customer sprecific. String not longer than 8096.
	//
	// Since version: 2.19
	GisProducts *string `form:"gisProducts,omitempty" json:"gisProducts,omitempty"`

	// IncludeIv Enables/disables search for individual transport routes.
	//
	// Since version: 2.6.5
	IncludeIv *GetTripParamsIncludeIv `form:"includeIv,omitempty" json:"includeIv,omitempty"`

	// IvOnly Enables/disables search for individual transport routes only.
	//
	// Since version: 1.23.20
	IvOnly *GetTripParamsIvOnly `form:"ivOnly,omitempty" json:"ivOnly,omitempty"`

	// IncludeDrt Enables/disables search for DRT routes.
	//
	// Since version: 2.42
	IncludeDrt *GetTripParamsIncludeDrt `form:"includeDrt,omitempty" json:"includeDrt,omitempty"`

	// MobilityProfile Use a predefined filter by its name. The filters are defined in the HAFAS installation. If the filter should be negated, put a ! in front of its name. String not longer than 512.
	//
	// Since version: 1.0
	MobilityProfile *string `form:"mobilityProfile,omitempty" json:"mobilityProfile,omitempty"`

	// BikeCarriage Enables/disables search for trips explicit allowing bike carriage.
	//
	// Since version: 1.0
	BikeCarriage *GetTripParamsBikeCarriage `form:"bikeCarriage,omitempty" json:"bikeCarriage,omitempty"`

	// BikeCarriageType Filter for a specific bike carriage type. Allowed types are SINGLEBIKES, SMALLGROUPS and LARGEGROUPS. May be not available in any installation.
	//
	// Since version: 2.16
	BikeCarriageType *GetTripParamsBikeCarriageType `form:"bikeCarriageType,omitempty" json:"bikeCarriageType,omitempty"`

	// SleepingCar Enables/disables search for trips having sleeping car.
	//
	// Since version: 1.0
	SleepingCar *GetTripParamsSleepingCar `form:"sleepingCar,omitempty" json:"sleepingCar,omitempty"`

	// CouchetteCoach Enables/disables search for trips having couchette coach.
	//
	// Since version: 1.0
	CouchetteCoach *GetTripParamsCouchetteCoach `form:"couchetteCoach,omitempty" json:"couchetteCoach,omitempty"`

	// ShowPassingPoints Enables/disables the return of stops having no alighting and boarding in its passlist for each leg of the trip. Needs passlist enabled.
	//
	// Since version: 1.0
	ShowPassingPoints *GetTripParamsShowPassingPoints `form:"showPassingPoints,omitempty" json:"showPassingPoints,omitempty"`

	// Baim Enables/disables BAIM search and response.
	//
	// Since version: 1.23.8
	Baim *GetTripParamsBaim `form:"baim,omitempty" json:"baim,omitempty"`

	// Eco Only supported if legacy environmental calculator is used.
	//
	// Deprecated. Enables/disables eco value calculation.
	//
	// Since version: 1.23.9
	Eco *GetTripParamsEco `form:"eco,omitempty" json:"eco,omitempty"`

	// EcoCmp Only supported if legacy environmental calculator is used.
	//
	// Deprecated. Enables/disables eco comparison.
	//
	// Since version: 1.23.9
	EcoCmp *GetTripParamsEcoCmp `form:"ecoCmp,omitempty" json:"ecoCmp,omitempty"`

	// EcoParams Provide additional eco parameters. String not longer than 1024.
	//
	// Since version: 1.23.9
	EcoParams *string `form:"ecoParams,omitempty" json:"ecoParams,omitempty"`

	// RtMode Set the realtime mode to be used.
	//
	// Since version: 1.0
	RtMode *GetTripParamsRtMode `form:"rtMode,omitempty" json:"rtMode,omitempty"`

	// Unsharp Enables/disables unsharp search mode.
	//
	// Since version: 1.23.13
	Unsharp *GetTripParamsUnsharp `form:"unsharp,omitempty" json:"unsharp,omitempty"`

	// TrainFilter Filters a trip search for a certain train. String not longer than 1024.
	//
	// Since version: 1.23.9
	TrainFilter *string `form:"trainFilter,omitempty" json:"trainFilter,omitempty"`

	// Economic Enables/disables economic search mode.
	//
	// Since version: 1.23.14
	Economic *GetTripParamsEconomic `form:"economic,omitempty" json:"economic,omitempty"`

	// AllowFootpathEquivalences If the walk is disabled or a maximum walk distance of 0 is set and all other gis modalities are disabled HAFAS is allowed to use start/destination equivalences that are connected by a data foot path.
	//
	// Since version: 2.26
	AllowFootpathEquivalences *GetTripParamsAllowFootpathEquivalences `form:"allowFootpathEquivalences,omitempty" json:"allowFootpathEquivalences,omitempty"`

	// GroupFilter Use a predefined group filter to query for certain modes. String not longer than 512.
	//
	// Since version: 1.23.14
	GroupFilter *string `form:"groupFilter,omitempty" json:"groupFilter,omitempty"`

	// BlockingList Defines a section of a route of a journey not to be used within the trip search. String not longer than 32768.
	//
	// Since version: 1.23.18
	BlockingList *string `form:"blockingList,omitempty" json:"blockingList,omitempty"`

	// BlockedEdges List of edges within the public transport network that should be excluded from the result. String not longer than 32768.
	//
	// Since version: 2.22
	BlockedEdges *string `form:"blockedEdges,omitempty" json:"blockedEdges,omitempty"`

	// TrainComposition Enables/disables train composition data.
	//
	// Since version: 1.0
	TrainComposition *GetTripParamsTrainComposition `form:"trainComposition,omitempty" json:"trainComposition,omitempty"`

	// IncludeEarlier Disables search optimization in relation of duration.
	//
	// Since version: 1.23.18
	IncludeEarlier *GetTripParamsIncludeEarlier `form:"includeEarlier,omitempty" json:"includeEarlier,omitempty"`

	// WithICTAlternatives Enables/disables the search for alternatives with individualized change times (ICT).
	//
	// Since version: 1.23.19
	WithICTAlternatives *GetTripParamsWithICTAlternatives `form:"withICTAlternatives,omitempty" json:"withICTAlternatives,omitempty"`

	// Tariff Enables/disables the output of tariff data. The default is configurable via provisioning.
	//
	// Since version: 2.7
	Tariff *GetTripParamsTariff `form:"tariff,omitempty" json:"tariff,omitempty"`

	// TrafficMessages Enables/disables the output of traffic messages. The default is configurable via provisioning.
	//
	// Since version: 2.7
	TrafficMessages *GetTripParamsTrafficMessages `form:"trafficMessages,omitempty" json:"trafficMessages,omitempty"`

	// TravellerProfileData Traveller profile data. Structure depends on set up. String not longer than 32768.
	//
	// Since version: 2.15
	TravellerProfileData *string `form:"travellerProfileData,omitempty" json:"travellerProfileData,omitempty"`

	// WithFreq Enables/disables the calculation of frequency information.
	//
	// Since version: 2.18
	WithFreq *GetTripParamsWithFreq `form:"withFreq,omitempty" json:"withFreq,omitempty"`

	// WithJourneyBoundaryPoints Enables/disables the return of journey boundary stops at public transport legs.
	//
	// Since version: 2.24
	WithJourneyBoundaryPoints *GetTripParamsWithJourneyBoundaryPoints `form:"withJourneyBoundaryPoints,omitempty" json:"withJourneyBoundaryPoints,omitempty"`
}

// GetTripParamsFormat defines parameters for GetTrip.
type GetTripParamsFormat string

// GetTripParamsOriginCoordType defines parameters for GetTrip.
type GetTripParamsOriginCoordType string

// GetTripParamsDestCoordType defines parameters for GetTrip.
type GetTripParamsDestCoordType string

// GetTripParamsSearchForArrival defines parameters for GetTrip.
type GetTripParamsSearchForArrival string

// GetTripParamsPoly defines parameters for GetTrip.
type GetTripParamsPoly string

// GetTripParamsPolyEnc defines parameters for GetTrip.
type GetTripParamsPolyEnc string

// GetTripParamsPasslist defines parameters for GetTrip.
type GetTripParamsPasslist string

// GetTripParamsIncludeIv defines parameters for GetTrip.
type GetTripParamsIncludeIv string

// GetTripParamsIvOnly defines parameters for GetTrip.
type GetTripParamsIvOnly string

// GetTripParamsIncludeDrt defines parameters for GetTrip.
type GetTripParamsIncludeDrt string

// GetTripParamsBikeCarriage defines parameters for GetTrip.
type GetTripParamsBikeCarriage string

// GetTripParamsBikeCarriageType defines parameters for GetTrip.
type GetTripParamsBikeCarriageType string

// GetTripParamsSleepingCar defines parameters for GetTrip.
type GetTripParamsSleepingCar string

// GetTripParamsCouchetteCoach defines parameters for GetTrip.
type GetTripParamsCouchetteCoach string

// GetTripParamsShowPassingPoints defines parameters for GetTrip.
type GetTripParamsShowPassingPoints string

// GetTripParamsBaim defines parameters for GetTrip.
type GetTripParamsBaim string

// GetTripParamsEco defines parameters for GetTrip.
type GetTripParamsEco string

// GetTripParamsEcoCmp defines parameters for GetTrip.
type GetTripParamsEcoCmp string

// GetTripParamsRtMode defines parameters for GetTrip.
type GetTripParamsRtMode string

// GetTripParamsUnsharp defines parameters for GetTrip.
type GetTripParamsUnsharp string

// GetTripParamsEconomic defines parameters for GetTrip.
type GetTripParamsEconomic string

// GetTripParamsAllowFootpathEquivalences defines parameters for GetTrip.
type GetTripParamsAllowFootpathEquivalences string

// GetTripParamsTrainComposition defines parameters for GetTrip.
type GetTripParamsTrainComposition string

// GetTripParamsIncludeEarlier defines parameters for GetTrip.
type GetTripParamsIncludeEarlier string

// GetTripParamsWithICTAlternatives defines parameters for GetTrip.
type GetTripParamsWithICTAlternatives string

// GetTripParamsTariff defines parameters for GetTrip.
type GetTripParamsTariff string

// GetTripParamsTrafficMessages defines parameters for GetTrip.
type GetTripParamsTrafficMessages string

// GetTripParamsWithFreq defines parameters for GetTrip.
type GetTripParamsWithFreq string

// GetTripParamsWithJourneyBoundaryPoints defines parameters for GetTrip.
type GetTripParamsWithJourneyBoundaryPoints string
